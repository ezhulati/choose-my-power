{
  "name": "choose-my-power",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "engines": {
    "node": ">=20.5.0",
    "npm": ">=10.2.0"
  },
  "scripts": {
    "dev": "astro dev",
    "start": "astro dev",
    "build": "npm run build:data:smart && astro build",
    "build:local": "LOCAL_BUILD=true npm run build:data:smart && LOCAL_BUILD=true astro build",
    "build:legacy": "npm run build:data && astro check && astro build",
    "build:data": "node scripts/build/build-data.mjs",
    "build:data:smart": "node scripts/build-data-smart.mjs",
    "build:data:fresh": "USE_CACHED_DATA=false node scripts/build-data-smart.mjs",
    "build:data:force": "FORCE_REBUILD=true node scripts/build-data-smart.mjs",
    "build:data:881": "MAX_CITIES=881 BATCH_SIZE=10 BATCH_DELAY_MS=2000 node scripts/build-data-smart.mjs",
    "build:data:881:fast": "MAX_CITIES=881 BATCH_SIZE=20 BATCH_DELAY_MS=1000 node scripts/build-data-smart.mjs",
    "build:data:881:safe": "MAX_CITIES=881 BATCH_SIZE=5 BATCH_DELAY_MS=3000 node scripts/build-data-smart.mjs",
    "build:data:tier1": "TIER_PRIORITY=high MAX_CITIES=200 node scripts/build-data-smart.mjs",
    "build:faceted": "node scripts/build-faceted-pages.mjs",
    "build:production": "NODE_ENV=production npm run build",
    "preview": "astro preview",
    "preview:local": "LOCAL_BUILD=true astro preview",
    "astro": "astro",
    "lint": "eslint .",
    "validate:ids": "./scripts/validate-no-hardcoded-ids.sh",
    "test": "vitest",
    "test:ui": "vitest --ui",
    "test:run": "vitest run",
    "test:coverage": "vitest run --coverage",
    "test:e2e": "playwright test",
    "test:e2e:ui": "playwright test --ui",
    "test:all": "npm run test:run && npm run test:e2e",
    "test:api": "node scripts/test-production-api.mjs",
    "test:api:quick": "node scripts/test-production-api.mjs --quick",
    "test:integration": "vitest run tests/integration",
    "test:faceted": "node scripts/test-multi-filter-validation.mjs",
    "test:faceted:full": "node scripts/test-faceted-system.mjs",
    "test:faceted:e2e": "node scripts/test-faceted-system.mjs --e2e",
    "deploy:production": "NODE_ENV=production MASS_DEPLOYMENT=true node scripts/production-deploy-881-cities.mjs",
    "deploy:validate": "node scripts/production-deploy-881-cities.mjs --validate-only",
    "deploy:tier1": "node scripts/production-deploy-881-cities.mjs --tiers=tier1",
    "deploy:tier2": "node scripts/production-deploy-881-cities.mjs --tiers=tier1,tier2",
    "deploy:resume": "node scripts/production-deploy-881-cities.mjs --resume",
    "deploy:status": "node scripts/check-deployment-status.mjs",
    "cache:warm": "NODE_ENV=production node -e 'import(\"./src/lib/api/comparepower-client.ts\").then(m => m.warmAllCitiesCache())'\" ",
    "cache:stats": "node -e 'import(\"./src/lib/api/comparepower-client.ts\").then(async m => console.log(JSON.stringify(await m.comparePowerClient.getCacheStats(), null, 2)))'\" ",
    "cache:clear": "node -e 'import(\"./src/lib/api/comparepower-client.ts\").then(m => m.comparePowerClient.clearCache())'\" ",
    "monitor:start": "NODE_ENV=production node -e 'import(\"./src/lib/monitoring/production-metrics.ts\").then(m => { console.log(\"Starting production monitoring...\"); m.productionMonitor.startMonitoring(30000); })'\" ",
    "monitor:metrics": "node -e 'import(\"./src/lib/monitoring/production-metrics.ts\").then(m => console.log(m.productionMonitor.exportMetrics()))'\" ",
    "db:test": "node scripts/database/test-database-simple.mjs",
    "db:setup": "node scripts/database/setup-database-simple.mjs",
    "db:reset": "echo '⚠️ Reset not implemented yet - use Netlify dashboard to reset database'",
    "og:generate-all": "node scripts/generate-og-images.js generate-all",
    "og:generate-priority": "node scripts/generate-priority-batch.js",
    "og:city": "node scripts/generate-og-images.js generate-city",
    "og:status": "node scripts/generate-og-images.js status",
    "og:preview": "node scripts/generate-og-images.js preview",
    "og:cache-stats": "node scripts/generate-og-images.js cache-stats",
    "og:cleanup": "node scripts/generate-og-images.js cleanup",
    "og:help": "node scripts/og-help.js",
    "og:monitor": "node scripts/monitor-og-batch.js",
    "og:test": "node scripts/test-og-system.js",
    "og:test-api": "node scripts/test-ideogram-api.js",
    "og:test-simple": "node scripts/og-simple-test.js",
    "og:priority-demo": "node scripts/og-priority-demo.js",
    "og:validate": "node scripts/validate-og-system.js",
    "og:summary": "node scripts/og-summary.js",
    "security:audit": "npm audit && npm run security:scan",
    "security:scan": "eslint . --config .eslintrc.security.js --ext .js,.jsx,.ts,.tsx",
    "security:fix": "eslint . --config .eslintrc.security.js --ext .js,.jsx,.ts,.tsx --fix",
    "perf:test": "node scripts/testing/performance-test-suite.mjs",
    "perf:test:quick": "node scripts/performance-test-suite.mjs --quick",
    "perf:test:critical": "node scripts/performance-test-suite.mjs --critical-only",
    "perf:monitor": "node scripts/performance-monitor.mjs",
    "perf:report": "open reports/performance/performance-report.html",
    "images:optimize": "node scripts/optimize-images.mjs",
    "images:optimize:force": "node scripts/optimize-images.mjs --force",
    "production:deploy": "npm run deploy:production",
    "production:validate": "npm run deploy:validate && npm run health:check && npm run cache:stats",
    "production:monitor": "npm run monitor:start",
    "production:status": "npm run deploy:status && npm run health:check && npm run monitor:metrics",
    "health:check": "node -e 'import(\"./src/lib/api/comparepower-client.ts\").then(async m => { const health = await m.comparePowerClient.healthCheck(); console.log(JSON.stringify(health, null, 2)); })'\" ",
    "sync:priority": "node scripts/sync-electricity-data.mjs priority",
    "sync:full": "node scripts/sync-electricity-data.mjs full",
    "sync:city": "node scripts/sync-electricity-data.mjs city",
    "sync:monitor": "node scripts/sync-electricity-data.mjs monitor",
    "sync:status": "node scripts/sync-electricity-data.mjs status",
    "sync:stop": "node scripts/sync-electricity-data.mjs stop",
    "sync:emergency": "node scripts/sync-electricity-data.mjs emergency",
    "db:optimize": "node -e 'import(\"./src/lib/database/performance-optimization.ts\").then(m => m.optimizeDatabaseForProduction())'\" ",
    "db:health": "node -e 'import(\"./src/lib/database/performance-optimization.ts\").then(m => m.checkDatabaseHealth().then(h => console.log(JSON.stringify(h, null, 2))))'\" ",
    "db:metrics": "node -e 'import(\"./src/lib/database/performance-optimization.ts\").then(m => m.getDatabasePerformanceReport().then(r => console.log(JSON.stringify(r, null, 2))))'\" ",
    "db:maintenance": "node -e 'import(\"./src/lib/database/performance-optimization.ts\").then(m => m.performDatabaseMaintenance())'\" ",
    "changelog:validate": "node scripts/changelog/validate-changelog.mjs",
    "changelog:add": "node scripts/changelog/interactive-changelog.mjs",
    "changelog:release": "node scripts/changelog/release-version.mjs",
    "changelog:format": "node scripts/changelog/format-changelog.mjs",
    "hooks:install": "bash scripts/install-git-hooks.sh",
    "hooks:test": "bash scripts/test-git-hooks.sh",
    "agents:test": "node scripts/agents/test-langgraph-integration.mjs",
    "agents:health": "node -e 'import(\"./src/lib/agents/agent-integration.js\").then(m => m.validateIntegrations().then(r => console.log(JSON.stringify(r, null, 2))))'",
    "agents:metrics": "node -e 'import(\"./src/lib/agents/agent-integration.js\").then(m => console.log(JSON.stringify(m.agentMetrics.getMetrics(), null, 2)))'",
    "agents:pipeline": "node -e 'import(\"./src/lib/agents/data-pipeline-agent.js\").then(m => m.dataPipelineAgent.runPipeline().then(r => console.log(r)))'",
    "agents:pipeline:stream": "node -e 'import(\"./src/lib/agents/data-pipeline-agent.js\").then(async m => { const stream = await m.dataPipelineAgent.streamPipeline(); for await (const update of stream) console.log(update); })'",
    "agents:recommend": "node -e 'import(\"./src/lib/agents/plan-recommendation-agent.js\").then(m => m.planRecommendationAgent.recommend(\"Find me a good plan\", \"houston-tx\").then(r => console.log(r)))'",
    "agents:chat": "node -e 'import(\"./src/lib/agents/support-chatbot-agent.js\").then(m => m.supportChatbotAgent.chat(\"Hello\").then(r => console.log(r)))'",
    "agents:connect": "node scripts/test-anthropic-connection.mjs"
  },
  "dependencies": {
    "@astrojs/check": "^0.9.4",
    "@astrojs/netlify": "^6.5.9",
    "@astrojs/node": "^9.4.3",
    "@astrojs/react": "^4.3.0",
    "@astrojs/tailwind": "^6.0.2",
    "@fal-ai/client": "^1.6.2",
    "@hookform/resolvers": "^5.2.1",
    "@iconify/react": "^6.0.0",
    "@iconify/utils": "^3.0.1",
    "@langchain/anthropic": "^0.3.26",
    "@langchain/core": "^0.3.73",
    "@langchain/langgraph": "^0.4.9",
    "@netlify/neon": "^0.1.0",
    "@radix-ui/react-avatar": "^1.1.10",
    "@radix-ui/react-dialog": "^1.1.15",
    "@radix-ui/react-dropdown-menu": "^2.1.16",
    "@radix-ui/react-icons": "^1.3.2",
    "@radix-ui/react-progress": "^1.1.7",
    "@radix-ui/react-select": "^2.2.6",
    "@radix-ui/react-separator": "^1.1.7",
    "@radix-ui/react-slider": "^1.3.6",
    "@radix-ui/react-slot": "^1.2.3",
    "@radix-ui/react-tabs": "^1.1.13",
    "@radix-ui/react-tooltip": "^1.2.8",
    "astro": "^5.13.4",
    "autoprefixer": "^10.4.18",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "dotenv": "^17.2.1",
    "drizzle-kit": "^0.31.4",
    "drizzle-orm": "^0.44.5",
    "fuse.js": "^7.1.0",
    "ioredis": "^5.3.2",
    "lucide-react": "^0.344.0",
    "playwright": "^1.55.0",
    "postcss": "^8.4.35",
    "postgres": "^3.4.7",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-hook-form": "^7.62.0",
    "tailwind-merge": "^3.3.1",
    "tailwindcss": "^3.4.1",
    "tailwindcss-animate": "^1.0.7",
    "zod": "^3.25.76"
  },
  "devDependencies": {
    "@eslint/js": "^9.9.1",
    "@playwright/test": "^1.40.0",
    "@testing-library/jest-dom": "^6.1.0",
    "@testing-library/react": "^14.1.0",
    "@testing-library/user-event": "^14.6.1",
    "@types/ioredis": "^5.0.0",
    "@types/react": "^18.3.5",
    "@types/react-dom": "^18.3.0",
    "@vitejs/plugin-react": "^4.3.1",
    "@vitest/coverage-v8": "^3.2.4",
    "@vitest/ui": "^3.2.4",
    "eslint": "^9.9.1",
    "eslint-plugin-react-hooks": "^5.1.0-rc.0",
    "eslint-plugin-react-refresh": "^0.4.11",
    "eslint-plugin-security": "^1.7.1",
    "globals": "^15.9.0",
    "jsdom": "^23.0.0",
    "lighthouse": "^12.8.1",
    "msw": "^2.0.0",
    "puppeteer": "^24.17.1",
    "typescript": "^5.9.2",
    "typescript-eslint": "^8.3.0",
    "vite": "^5.4.10",
    "vitest": "^3.2.4"
  }
}
