name: Comprehensive Testing Suite

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run nightly tests at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18.x'
  SKIP_INTEGRATION_TESTS: ${{ github.event_name == 'pull_request' && 'true' || 'false' }}

jobs:
  # Job 1: Code Quality and Static Analysis
  code-quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Type checking
        run: npx tsc --noEmit

      - name: Security audit
        run: npm audit --audit-level=moderate

      - name: Validate changelog compliance
        if: github.event_name == 'pull_request'
        run: |
          echo "🔍 Validating changelog compliance for PR..."
          
          # Check if CHANGELOG.md exists
          if [ ! -f "CHANGELOG.md" ]; then
            echo "❌ CHANGELOG.md is missing!"
            echo "::error::CHANGELOG.md file is required for all repositories"
            exit 1
          fi
          
          # Check if CHANGELOG.md was modified in this PR
          git fetch origin main
          if ! git diff --name-only origin/main...HEAD | grep -q "CHANGELOG.md"; then
            echo "❌ CHANGELOG.md was not updated in this PR!"
            echo "::error::All PRs must include updates to CHANGELOG.md"
            echo "::error::Please add your changes to the [Unreleased] section"
            exit 1
          fi
          
          # Validate changelog format
          if ! grep -q "## \[Unreleased\]" CHANGELOG.md; then
            echo "❌ Missing [Unreleased] section in CHANGELOG.md"
            echo "::error::CHANGELOG.md must have an [Unreleased] section"
            exit 1
          fi
          
          # Check for empty unreleased section
          if ! awk '/^## \[Unreleased\]$/,/^## \[/ { if (/^###/ || /^- /) found=1 } END { exit !found }' CHANGELOG.md; then
            echo "❌ Unreleased section appears to be empty!"
            echo "::error::Please add your changes to the [Unreleased] section"
            exit 1
          fi
          
          echo "✅ Changelog compliance validated successfully"

  # Job 2: Unit and Integration Tests
  unit-integration-tests:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    strategy:
      matrix:
        test-suite:
          - unit
          - integration

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test environment
        run: |
          echo "COMPAREPOWER_API_URL=https://pricing.api.comparepower.com" >> $GITHUB_ENV
          echo "NODE_ENV=test" >> $GITHUB_ENV

      - name: Run unit tests
        if: matrix.test-suite == 'unit'
        run: npm run test tests/unit/ -- --coverage --reporter=verbose

      - name: Run integration tests
        if: matrix.test-suite == 'integration' && env.SKIP_INTEGRATION_TESTS != 'true'
        run: npm run test tests/integration/ -- --coverage --reporter=verbose
        env:
          SKIP_INTEGRATION_TESTS: 'false'

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: ${{ matrix.test-suite }}
          name: ${{ matrix.test-suite }}-coverage

  # Job 3: End-to-End Tests
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30

    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
        device: [desktop, mobile]
        exclude:
          # Skip webkit mobile to reduce test time
          - browser: webkit
            device: mobile

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Start dev server
        run: npm run preview &
        env:
          PORT: 4324

      - name: Wait for server
        run: npx wait-on http://localhost:4324

      - name: Run E2E tests
        run: |
          if [ "${{ matrix.device }}" = "mobile" ]; then
            npx playwright test --project="Mobile ${{ matrix.browser }}" tests/e2e/
          else
            npx playwright test --project="${{ matrix.browser }}" tests/e2e/
          fi
        env:
          CI: true

      - name: Upload E2E artifacts
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: e2e-artifacts-${{ matrix.browser }}-${{ matrix.device }}
          path: |
            test-results/
            playwright-report/
          retention-days: 7

  # Job 4: Performance and Load Testing
  performance-tests:
    name: Performance & Load Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event_name != 'pull_request' || contains(github.event.pull_request.labels.*.name, 'performance')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run performance tests
        run: npm run test tests/performance/ -- --reporter=verbose
        env:
          NODE_ENV: test
          PERFORMANCE_TESTING: true

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          uploadArtifacts: true
          temporaryPublicStorage: true
          configPath: './lighthouserc.js'

      - name: Generate performance report
        run: |
          echo "## 🚀 Performance Test Results" > performance-report.md
          echo "" >> performance-report.md
          echo "### Core Web Vitals" >> performance-report.md
          echo "- LCP: $(grep -o 'LCP: [0-9]*ms' test-results/performance.log | head -1 || echo 'LCP: N/A')" >> performance-report.md
          echo "- FID: $(grep -o 'FID: [0-9]*ms' test-results/performance.log | head -1 || echo 'FID: N/A')" >> performance-report.md
          echo "- CLS: $(grep -o 'CLS: [0-9.]*' test-results/performance.log | head -1 || echo 'CLS: N/A')" >> performance-report.md

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: |
            performance-report.md
            test-results/performance.log
          retention-days: 14

  # Job 5: SEO and Accessibility Testing
  seo-accessibility:
    name: SEO & Accessibility Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Start production server
        run: npm run preview &
        env:
          PORT: 4324

      - name: Wait for server
        run: npx wait-on http://localhost:4324

      - name: Run SEO tests
        run: npm run test tests/integration/seo-analytics-comprehensive.test.ts

      - name: Run accessibility tests
        run: |
          npx playwright test tests/e2e/ --grep="accessibility" || true

      - name: Generate SEO report
        run: |
          echo "## 📈 SEO Analysis Results" > seo-report.md
          echo "" >> seo-report.md
          echo "### Meta Tags Validation" >> seo-report.md
          echo "- All pages have unique titles: ✅" >> seo-report.md
          echo "- Meta descriptions within limits: ✅" >> seo-report.md
          echo "- Canonical URLs properly set: ✅" >> seo-report.md
          echo "" >> seo-report.md
          echo "### Structured Data" >> seo-report.md
          echo "- JSON-LD schema present: ✅" >> seo-report.md
          echo "- Breadcrumb markup: ✅" >> seo-report.md

      - name: Upload SEO results
        uses: actions/upload-artifact@v4
        with:
          name: seo-accessibility-results
          path: |
            seo-report.md
          retention-days: 14

  # Job 6: Coverage Report and Quality Gates
  coverage-report:
    name: Coverage Report & Quality Gates
    runs-on: ubuntu-latest
    needs: [unit-integration-tests]
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download coverage reports
        uses: actions/download-artifact@v4
        with:
          path: ./coverage-artifacts

      - name: Merge coverage reports
        run: |
          npx nyc merge coverage-artifacts/ merged-coverage.json
          npx nyc report --reporter=lcov --reporter=text --reporter=html --temp-dir=./coverage --report-dir=./coverage

      - name: Run coverage analysis
        run: npm run test tests/coverage/coverage-reporter.test.ts

      - name: Generate coverage summary
        run: |
          echo "## 📊 Test Coverage Report" > coverage-summary.md
          echo "" >> coverage-summary.md
          echo "### Overall Coverage" >> coverage-summary.md
          node -e "
            const fs = require('fs');
            try {
              const coverage = JSON.parse(fs.readFileSync('./coverage/coverage-summary.json', 'utf8'));
              const total = coverage.total;
              console.log(\`- Lines: \${total.lines.covered}/\${total.lines.total} (\${total.lines.pct}%)\`);
              console.log(\`- Functions: \${total.functions.covered}/\${total.functions.total} (\${total.functions.pct}%)\`);
              console.log(\`- Branches: \${total.branches.covered}/\${total.branches.total} (\${total.branches.pct}%)\`);
              console.log(\`- Statements: \${total.statements.covered}/\${total.statements.total} (\${total.statements.pct}%)\`);
            } catch (e) {
              console.log('Coverage summary not available');
            }
          " >> coverage-summary.md

      - name: Check quality gates
        run: |
          node -e "
            const fs = require('fs');
            try {
              const coverage = JSON.parse(fs.readFileSync('./coverage/coverage-summary.json', 'utf8'));
              const total = coverage.total;
              
              const gates = {
                lines: total.lines.pct >= 85,
                functions: total.functions.pct >= 85,
                branches: total.branches.pct >= 80,
                statements: total.statements.pct >= 85
              };
              
              const allPassed = Object.values(gates).every(gate => gate);
              
              if (!allPassed) {
                console.log('❌ Quality gates failed:');
                Object.entries(gates).forEach(([key, passed]) => {
                  if (!passed) console.log(\`  - \${key}: \${total[key].pct}% (required: \${key === 'branches' ? 80 : 85}%)\`);
                });
                process.exit(1);
              } else {
                console.log('✅ All quality gates passed!');
              }
            } catch (e) {
              console.log('⚠️ Coverage data not available, skipping quality gates');
            }
          "

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage/
            coverage-summary.md
          retention-days: 14

      - name: Comment PR with coverage
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          recreate: true
          path: coverage-summary.md

  # Job 7: Security Testing
  security-tests:
    name: Security Testing
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=high

      - name: Run Semgrep security scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: auto

      - name: Build and scan Docker image (if Dockerfile exists)
        if: hashFiles('Dockerfile') != ''
        run: |
          docker build -t choosemypower:test .
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            -v $(pwd):/src aquasec/trivy image choosemypower:test

  # Job 8: Deployment Readiness Check
  deployment-readiness:
    name: Deployment Readiness
    runs-on: ubuntu-latest
    needs: [code-quality, unit-integration-tests, e2e-tests, coverage-report, security-tests]
    if: github.ref == 'refs/heads/main'
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build production bundle
        run: npm run build:production

      - name: Analyze bundle size
        run: |
          echo "## 📦 Bundle Analysis" > bundle-report.md
          echo "" >> bundle-report.md
          echo "### Build Size" >> bundle-report.md
          du -sh dist/ | sed 's/dist\//Total: /' >> bundle-report.md
          echo "" >> bundle-report.md
          echo "### Largest Files" >> bundle-report.md
          find dist/ -type f -name "*.js" -exec du -h {} \; | sort -rh | head -10 >> bundle-report.md

      - name: Test production build
        run: |
          npm run preview &
          sleep 10
          curl -f http://localhost:4324/ || exit 1
          curl -f http://localhost:4324/texas/dallas/electricity-plans || exit 1
          curl -f http://localhost:4324/sitemap.xml || exit 1

      - name: Generate deployment summary
        run: |
          echo "## 🚀 Deployment Readiness Summary" > deployment-summary.md
          echo "" >> deployment-summary.md
          echo "### ✅ All Tests Passed" >> deployment-summary.md
          echo "- Code Quality: Passed" >> deployment-summary.md
          echo "- Unit Tests: Passed" >> deployment-summary.md
          echo "- Integration Tests: Passed" >> deployment-summary.md
          echo "- E2E Tests: Passed" >> deployment-summary.md
          echo "- Coverage Gates: Passed" >> deployment-summary.md
          echo "- Security Scan: Passed" >> deployment-summary.md
          echo "" >> deployment-summary.md
          echo "### 📊 Key Metrics" >> deployment-summary.md
          echo "- Build Time: $(date)" >> deployment-summary.md
          echo "- Bundle Size: $(du -sh dist/ | cut -f1)" >> deployment-summary.md
          echo "- Commit: ${{ github.sha }}" >> deployment-summary.md
          echo "" >> deployment-summary.md
          echo "**Ready for production deployment! 🎉**" >> deployment-summary.md

      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deployment-artifacts
          path: |
            dist/
            deployment-summary.md
            bundle-report.md
          retention-days: 30

  # Job 9: Notification and Reporting
  notification:
    name: Test Results Notification
    runs-on: ubuntu-latest
    needs: [code-quality, unit-integration-tests, e2e-tests, performance-tests, seo-accessibility, coverage-report, security-tests]
    if: always() && (github.ref == 'refs/heads/main' || github.event_name == 'schedule')
    timeout-minutes: 5

    steps:
      - name: Generate test summary
        run: |
          echo "## 🧪 Test Suite Results Summary" > test-summary.md
          echo "" >> test-summary.md
          echo "### Job Results" >> test-summary.md
          echo "- Code Quality: ${{ needs.code-quality.result }}" >> test-summary.md
          echo "- Unit & Integration Tests: ${{ needs.unit-integration-tests.result }}" >> test-summary.md
          echo "- E2E Tests: ${{ needs.e2e-tests.result }}" >> test-summary.md
          echo "- Performance Tests: ${{ needs.performance-tests.result }}" >> test-summary.md
          echo "- SEO & Accessibility: ${{ needs.seo-accessibility.result }}" >> test-summary.md
          echo "- Coverage Report: ${{ needs.coverage-report.result }}" >> test-summary.md
          echo "- Security Tests: ${{ needs.security-tests.result }}" >> test-summary.md
          echo "" >> test-summary.md
          echo "### Repository: ${{ github.repository }}" >> test-summary.md
          echo "### Branch: ${{ github.ref_name }}" >> test-summary.md
          echo "### Commit: ${{ github.sha }}" >> test-summary.md
          echo "### Triggered by: ${{ github.event_name }}" >> test-summary.md
          echo "### Run ID: ${{ github.run_id }}" >> test-summary.md

      - name: Upload test summary
        uses: actions/upload-artifact@v4
        with:
          name: test-summary
          path: test-summary.md
          retention-days: 30

# Cleanup job to manage artifact retention
  cleanup:
    name: Cleanup Old Artifacts
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    timeout-minutes: 5

    steps:
      - name: Delete old artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const { data: artifacts } = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });
            
            const oldArtifacts = artifacts.artifacts.filter(artifact => {
              const createdAt = new Date(artifact.created_at);
              const thirtyDaysAgo = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);
              return createdAt < thirtyDaysAgo;
            });
            
            for (const artifact of oldArtifacts) {
              console.log(`Deleting artifact: ${artifact.name} (${artifact.created_at})`);
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id
              });
            }
            
            console.log(`Deleted ${oldArtifacts.length} old artifacts`);