name: Comprehensive Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 6 AM UTC
    - cron: '0 6 * * *'

jobs:
  unit-tests:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run unit tests with coverage
      run: npm run test:coverage
      
    - name: Run integration tests
      run: npm run test:run -- tests/integration
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: success() || failure()
      with:
        files: ./coverage/lcov.info
        flags: unit
        name: unit-tests
        
    - name: Archive test results
      uses: actions/upload-artifact@v4
      if: success() || failure()
      with:
        name: unit-test-results
        path: |
          coverage/
          test-results/
          
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install Playwright Browsers
      run: npx playwright install --with-deps
      
    - name: Build application
      run: npm run build
      
    - name: Start application
      run: npm run preview &
      env:
        PORT: 4173
        
    - name: Wait for application to be ready
      run: npx wait-on http://localhost:4173 --timeout 60000
      
    - name: Run E2E tests
      run: npm run test:e2e
      env:
        BASE_URL: http://localhost:4173
        
    - name: Upload E2E test results
      uses: actions/upload-artifact@v4
      if: success() || failure()
      with:
        name: e2e-test-results
        path: |
          playwright-report/
          test-results/
          
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install Playwright Browsers
      run: npx playwright install --with-deps chromium
      
    - name: Build application
      run: npm run build
      
    - name: Start application
      run: npm run preview &
      env:
        PORT: 4173
        
    - name: Wait for application to be ready
      run: npx wait-on http://localhost:4173 --timeout 60000
      
    - name: Run performance tests
      run: npm run test:e2e -- tests/e2e/performance.spec.ts
      env:
        BASE_URL: http://localhost:4173
        
    - name: Upload performance results
      uses: actions/upload-artifact@v4
      if: success() || failure()
      with:
        name: performance-test-results
        path: |
          playwright-report/
          test-results/
          
  seo-tests:
    name: SEO & Accessibility Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install Playwright Browsers
      run: npx playwright install --with-deps chromium
      
    - name: Build application
      run: npm run build
      
    - name: Start application
      run: npm run preview &
      env:
        PORT: 4173
        
    - name: Wait for application to be ready
      run: npx wait-on http://localhost:4173 --timeout 60000
      
    - name: Run SEO tests
      run: npm run test:e2e -- tests/e2e/seo.spec.ts
      env:
        BASE_URL: http://localhost:4173
        
    - name: Upload SEO test results
      uses: actions/upload-artifact@v4
      if: success() || failure()
      with:
        name: seo-test-results
        path: |
          playwright-report/
          test-results/
          
  lighthouse-audit:
    name: Lighthouse Performance Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      
    - name: Start application
      run: npm run preview &
      env:
        PORT: 4173
        
    - name: Wait for application to be ready
      run: npx wait-on http://localhost:4173 --timeout 60000
      
    - name: Run Lighthouse CI
      run: |
        npm install -g @lhci/cli@0.12.x
        lhci autorun
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
        LHCI_SERVER_URL: ${{ secrets.LHCI_SERVER_URL }}
        LHCI_BUILD_CONTEXT__CURRENT_HASH: ${{ github.sha }}
        LHCI_BUILD_CONTEXT__COMMIT_TIME: ${{ github.event.head_commit.timestamp }}
        
    - name: Upload Lighthouse results
      uses: actions/upload-artifact@v4
      if: success() || failure()
      with:
        name: lighthouse-results
        path: |
          .lighthouseci/
          
  api-integration:
    name: API Integration Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Test API connectivity
      run: node test-api.mjs
      env:
        COMPAREPOWER_API_URL: ${{ secrets.COMPAREPOWER_API_URL }}
        COMPAREPOWER_API_KEY: ${{ secrets.COMPAREPOWER_API_KEY }}
        
    - name: Test data transformation
      run: node test-client-transformation.mjs
      
    - name: Test final integration
      run: node test-integration-final.mjs
      
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run npm audit
      run: npm audit --audit-level=moderate
      
    - name: Run ESLint security rules
      run: npm run lint
      
  generate-report:
    name: Generate Test Report
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-tests, performance-tests, seo-tests, api-integration]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: test-artifacts/
        
    - name: Generate comprehensive report
      run: |
        mkdir -p test-reports
        node -e "
        const fs = require('fs');
        const path = require('path');
        
        const report = {
          timestamp: new Date().toISOString(),
          workflow: '${{ github.workflow }}',
          commit: '${{ github.sha }}',
          branch: '${{ github.ref_name }}',
          results: {}
        };
        
        try {
          const artifactsDir = 'test-artifacts';
          if (fs.existsSync(artifactsDir)) {
            const artifacts = fs.readdirSync(artifactsDir);
            report.results.artifactsFound = artifacts;
          }
        } catch (error) {
          report.error = error.message;
        }
        
        fs.writeFileSync('test-reports/ci-report.json', JSON.stringify(report, null, 2));
        console.log('Test report generated');
        "
        
    - name: Upload comprehensive report
      uses: actions/upload-artifact@v4
      with:
        name: comprehensive-test-report
        path: test-reports/
        
    - name: Comment PR with test results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          let comment = '## üß™ Test Results Summary\n\n';
          comment += '| Test Type | Status |\n';
          comment += '|-----------|--------|\n';
          comment += '| Unit Tests | ${{ needs.unit-tests.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |\n';
          comment += '| E2E Tests | ${{ needs.e2e-tests.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |\n';
          comment += '| Performance | ${{ needs.performance-tests.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |\n';
          comment += '| SEO Tests | ${{ needs.seo-tests.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |\n';
          comment += '| API Integration | ${{ needs.api-integration.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |\n';
          comment += '\n';
          comment += 'View detailed results in the [Actions tab](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}).\n';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
          
  # Deployment readiness check
  deployment-check:
    name: Deployment Readiness
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-tests, performance-tests, seo-tests, api-integration, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Check all tests passed
      run: |
        echo "Checking deployment readiness..."
        
        if [ "${{ needs.unit-tests.result }}" != "success" ]; then
          echo "‚ùå Unit tests failed"
          exit 1
        fi
        
        if [ "${{ needs.e2e-tests.result }}" != "success" ]; then
          echo "‚ùå E2E tests failed"
          exit 1
        fi
        
        if [ "${{ needs.performance-tests.result }}" != "success" ]; then
          echo "‚ö†Ô∏è Performance tests failed - consider reviewing before deployment"
        fi
        
        if [ "${{ needs.seo-tests.result }}" != "success" ]; then
          echo "‚ö†Ô∏è SEO tests failed - may impact search visibility"
        fi
        
        if [ "${{ needs.api-integration.result }}" != "success" ]; then
          echo "‚ùå API integration failed"
          exit 1
        fi
        
        if [ "${{ needs.security-scan.result }}" != "success" ]; then
          echo "‚ùå Security scan failed"
          exit 1
        fi
        
        echo "‚úÖ All critical tests passed - ready for deployment!"
        
    - name: Create deployment flag
      run: |
        echo "DEPLOYMENT_READY=true" >> $GITHUB_OUTPUT
        echo "DEPLOYMENT_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT