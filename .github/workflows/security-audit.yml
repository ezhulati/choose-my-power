name: Security Audit

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run weekly security audit
    - cron: '0 2 * * 1' # Every Monday at 2 AM UTC

jobs:
  credential-scan:
    name: Credential Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Get full history for comprehensive scanning

      - name: Install TruffleHog
        run: |
          curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin

      - name: Run TruffleHog Credential Scan
        run: |
          trufflehog git file://. \
            --exclude-paths=.github/workflows/security-audit.yml \
            --exclude-paths=node_modules/ \
            --exclude-paths=.git/ \
            --exclude-paths=dist/ \
            --exclude-paths=.astro/ \
            --fail \
            --json > trufflehog-results.json || true

      - name: Process Results
        run: |
          if [ -s trufflehog-results.json ]; then
            echo "‚ö†Ô∏è  Potential secrets found:"
            cat trufflehog-results.json | jq -r '.Raw // empty' | head -10
            echo ""
            echo "üîí Security Review Required"
            echo "Full results available in CI artifacts"
            exit 1
          else
            echo "‚úÖ No credentials detected"
          fi

      - name: Upload Results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: trufflehog-results
          path: trufflehog-results.json

  dependency-audit:
    name: Dependency Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Run npm audit
        run: |
          echo "üîç Running npm audit..."
          npm audit --audit-level high --json > npm-audit.json || true
          
          # Check if there are high/critical vulnerabilities
          HIGH_VULNS=$(cat npm-audit.json | jq '.metadata.vulnerabilities.high // 0')
          CRITICAL_VULNS=$(cat npm-audit.json | jq '.metadata.vulnerabilities.critical // 0')
          
          echo "High vulnerabilities: $HIGH_VULNS"
          echo "Critical vulnerabilities: $CRITICAL_VULNS"
          
          if [ "$HIGH_VULNS" -gt 0 ] || [ "$CRITICAL_VULNS" -gt 0 ]; then
            echo "‚ö†Ô∏è  Security vulnerabilities found in dependencies"
            npm audit --audit-level high
            exit 1
          else
            echo "‚úÖ No high or critical vulnerabilities found"
          fi

      - name: Upload Audit Results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: npm-audit-results
          path: npm-audit.json

  code-security-scan:
    name: Code Security Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Run ESLint Security
        run: |
          echo "üîç Running ESLint security rules..."
          npx eslint . \
            --ext .js,.jsx,.ts,.tsx \
            --config .eslintrc.security.js \
            --format json \
            --output-file eslint-security.json || true
          
          if [ -s eslint-security.json ] && [ "$(cat eslint-security.json | jq length)" -gt 0 ]; then
            echo "‚ö†Ô∏è  Security issues found in code"
            npx eslint . --ext .js,.jsx,.ts,.tsx --config .eslintrc.security.js
            exit 1
          else
            echo "‚úÖ No security issues found"
          fi

      - name: Check for Hardcoded Secrets
        run: |
          echo "üîç Checking for hardcoded patterns..."
          
          # Check for potential API keys and secrets
          if grep -r -E "(api[_-]?key|secret|password|token).*['\"][a-zA-Z0-9]{20,}" \
            --include="*.js" --include="*.ts" --include="*.jsx" --include="*.tsx" \
            --exclude-dir=node_modules --exclude-dir=.git --exclude-dir=dist \
            src/ scripts/ .; then
            echo "‚ö†Ô∏è  Potential hardcoded secrets found"
            exit 1
          else
            echo "‚úÖ No hardcoded secrets detected"
          fi

      - name: Check Environment Variable Usage
        run: |
          echo "üîç Validating environment variable usage..."
          
          # Check for missing process.env usage
          if grep -r -E "(api[_-]?key|secret|password|token).*=.*['\"][^'\"]*['\"]" \
            --include="*.js" --include="*.ts" --include="*.jsx" --include="*.tsx" \
            --exclude-dir=node_modules --exclude-dir=.git --exclude-dir=dist \
            src/ scripts/ . | grep -v "process\.env" | grep -v "import\.meta\.env"; then
            echo "‚ö†Ô∏è  Potential hardcoded credentials found (should use env vars)"
            exit 1
          else
            echo "‚úÖ Environment variable usage looks good"
          fi

  security-headers-test:
    name: Security Headers Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Build Application
        run: npm run build

      - name: Start Test Server
        run: |
          npm run preview &
          SERVER_PID=$!
          echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
          
          # Wait for server to start
          sleep 10

      - name: Test Security Headers
        run: |
          echo "üîç Testing security headers..."
          
          # Test main page headers
          HEADERS=$(curl -sI http://localhost:4173/)
          
          # Check for required security headers
          if ! echo "$HEADERS" | grep -i "content-security-policy"; then
            echo "‚ùå Missing Content-Security-Policy header"
            exit 1
          fi
          
          if ! echo "$HEADERS" | grep -i "x-content-type-options: nosniff"; then
            echo "‚ùå Missing X-Content-Type-Options header"
            exit 1
          fi
          
          if ! echo "$HEADERS" | grep -i "x-frame-options"; then
            echo "‚ùå Missing X-Frame-Options header"
            exit 1
          fi
          
          echo "‚úÖ Security headers present"

      - name: Cleanup
        if: always()
        run: |
          if [ ! -z "$SERVER_PID" ]; then
            kill $SERVER_PID || true
          fi

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [credential-scan, dependency-audit, code-security-scan, security-headers-test]
    if: always()
    steps:
      - name: Security Summary
        run: |
          echo "## üîí Security Audit Summary"
          echo ""
          echo "| Check | Status |"
          echo "|-------|--------|"
          echo "| Credential Scan | ${{ needs.credential-scan.result == 'success' && '‚úÖ Pass' || '‚ùå Fail' }} |"
          echo "| Dependency Audit | ${{ needs.dependency-audit.result == 'success' && '‚úÖ Pass' || '‚ùå Fail' }} |" 
          echo "| Code Security | ${{ needs.code-security-scan.result == 'success' && '‚úÖ Pass' || '‚ùå Fail' }} |"
          echo "| Security Headers | ${{ needs.security-headers-test.result == 'success' && '‚úÖ Pass' || '‚ùå Fail' }} |"
          echo ""
          
          if [ "${{ needs.credential-scan.result }}" != "success" ] || \
             [ "${{ needs.dependency-audit.result }}" != "success" ] || \
             [ "${{ needs.code-security-scan.result }}" != "success" ] || \
             [ "${{ needs.security-headers-test.result }}" != "success" ]; then
            echo "‚ö†Ô∏è  Security issues detected. Please review the failing checks above."
            exit 1
          else
            echo "‚úÖ All security checks passed!"
          fi