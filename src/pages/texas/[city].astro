---
// City page with live electricity plans from ComparePower API
import Layout from '../../layouts/Layout.astro';
import HeroBackground from '../../components/HeroBackground.astro';
import LivePlanGrid from '../../components/LivePlanGrid.astro';
import PlanFilters from '../../components/PlanFilters.astro';
import { tdspMapping, formatCityName } from '../../config/tdsp-mapping';
import { comparePowerClient } from '../../lib/api/comparepower-client';
import { getHeroImage } from '../../lib/images/hero-image-mapper';

export async function getStaticPaths() {
  // Generate static paths for all cities in mapping
  const cityPaths = Object.keys(tdspMapping).map(city => ({
    params: { city },
    props: { city }
  }));
  
  console.log(`Generated ${cityPaths.length} city paths`);
  return cityPaths;
}

const { city } = Astro.params;
const url = new URL(Astro.request.url);

// Get filter parameters from URL
const filter = url.searchParams.get('filter');
const term = url.searchParams.get('term');
const greenEnergy = url.searchParams.get('green');
const rateType = url.searchParams.get('type');
const sort = url.searchParams.get('sort');

// Validate city exists
if (!city || !tdspMapping[city]) {
  console.error(`Invalid city: ${city}`);
  return Astro.redirect('/404', 404);
}

const tdspInfo = tdspMapping[city];
const cityName = formatCityName(city);

// Build API parameters with filters
const apiParams = {
  tdsp_duns: tdspInfo.duns,
  display_usage: 1000 // Standard 1000 kWh usage
};

// Apply filters based on URL parameters
if (filter === '12-month' || term === '12') {
  apiParams.term = 12;
} else if (term) {
  apiParams.term = parseInt(term);
}

if (filter === 'green-energy' || greenEnergy === '100') {
  apiParams.percent_green = 100;
} else if (greenEnergy) {
  apiParams.percent_green = parseInt(greenEnergy);
}

// Note: ComparePower API doesn't have direct rate type filtering
// We'll filter client-side for now

// Fetch live electricity plans from ComparePower API
let plans = [];
let apiError = null;
let filterLabel = '';

try {
  console.log(`Fetching plans for ${cityName} (DUNS: ${tdspInfo.duns})`, apiParams);
  
  plans = await comparePowerClient.fetchPlans(apiParams);
  
  // Apply client-side filtering for rate types
  if (filter === 'fixed-rate' || rateType === 'fixed') {
    plans = plans.filter(plan => plan.contract?.type === 'fixed');
    filterLabel = 'Fixed Rate ';
  } else if (rateType === 'variable') {
    plans = plans.filter(plan => plan.contract?.type === 'variable');
    filterLabel = 'Variable Rate ';
  } else if (rateType === 'indexed') {
    plans = plans.filter(plan => plan.contract?.type === 'indexed');
    filterLabel = 'Indexed Rate ';
  }

  // Apply green energy filtering if not handled by API
  if (greenEnergy && greenEnergy !== '100') {
    const minGreen = parseInt(greenEnergy);
    plans = plans.filter(plan => plan.features?.greenEnergy >= minGreen);
  }
  
  // Apply sorting
  if (sort === 'price-low') {
    plans = plans.sort((a, b) => (a.pricing?.rate1000kWh || 999) - (b.pricing?.rate1000kWh || 999));
  } else if (sort === 'price-high') {
    plans = plans.sort((a, b) => (b.pricing?.rate1000kWh || 0) - (a.pricing?.rate1000kWh || 0));
  } else if (sort === 'green-high') {
    plans = plans.sort((a, b) => (b.features?.greenEnergy || 0) - (a.features?.greenEnergy || 0));
  } else if (sort === 'term-short') {
    plans = plans.sort((a, b) => (a.contract?.length || 999) - (b.contract?.length || 999));
  } else if (sort === 'term-long') {
    plans = plans.sort((a, b) => (b.contract?.length || 0) - (a.contract?.length || 0));
  }
  
  // Set filter labels for display
  if (filter === '12-month') filterLabel = '12-Month ';
  if (filter === 'green-energy') filterLabel = '100% Green Energy ';
  
  console.log(`Successfully fetched ${plans.length} ${filterLabel}plans for ${cityName}`);
} catch (error) {
  console.error(`Error fetching plans for ${cityName}:`, error);
  apiError = error.message || 'Unable to load plans at this time';
}

const title = `${filterLabel}Electricity Plans in ${cityName} | Live Rates & Providers`;
const description = `Compare ${plans.length} live ${filterLabel.toLowerCase()}electricity plans in ${cityName}, Texas. Find the best rates starting at ${plans.length > 0 ? Math.min(...plans.map(p => p.pricing?.rate1000kWh || 999)).toFixed(1) : 'N/A'}¢/kWh from top providers.`;

// Get contextual hero image for this city
const filters = [];
if (filter) filters.push(filter);
if (greenEnergy) filters.push('green-energy');
if (rateType) filters.push(rateType);

const heroImage = getHeroImage({ 
  pageType: 'city', 
  location: city,
  filters: filters.length > 0 ? filters : undefined
});

// Get city-specific OG image
function getCityOGImage(city: string): string {
  const cityImages = {
    'dallas-tx': '/images/og/comprehensive-clean/residential_neighborhood_16x9.png',
    'houston-tx': '/images/og/comprehensive-clean/residential_neighborhood_16x9.png',
    'austin-tx': '/images/og/comprehensive-clean/residential_neighborhood_16x9.png',
    'fort-worth-tx': '/images/og/comprehensive-clean/residential_neighborhood_16x9.png',
    'san-antonio-tx': '/images/og/comprehensive-clean/residential_neighborhood_16x9.png'
  };
  
  return cityImages[city] || '/images/og/comprehensive-clean/texas_state_overview_16x9.png';
}

const ogImage = getCityOGImage(city);
---

<Layout title={title} description={description} ogImage={ogImage}>
  <!-- Hero Section with City Background -->
  <HeroBackground 
    imageUrl={heroImage} 
    overlayOpacity={0.75}
  >
    <section class="text-white flex items-center justify-center min-h-[33vh] lg:min-h-[40vh]">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <header class="text-center">
          <h1 class="text-4xl md:text-6xl lg:text-7xl font-bold mb-6 drop-shadow-lg">
            {filterLabel}Electricity Plans in {cityName}
          </h1>
          <p class="text-xl lg:text-2xl text-blue-100 max-w-4xl mx-auto mb-8 drop-shadow-md leading-relaxed">
            {filterLabel ? `Showing ${filterLabel.toLowerCase()}plans from top providers serving ${cityName}, Texas.` : `Compare electricity plans and rates from top providers serving ${cityName}, Texas.`}
          </p>
          {filterLabel && (
            <div>
              <a href={`/texas/${city}`} class="inline-flex items-center text-blue-200 hover:text-white font-medium transition-colors drop-shadow-sm text-lg">
                ← View All Plans
              </a>
            </div>
          )}
        </header>
      </div>
    </section>
  </HeroBackground>

  <div class="max-w-7xl mx-auto px-4 py-8">

    <!-- TDSP Info -->
    <div class="bg-blue-50 border border-blue-200 rounded-lg p-6 mb-8">
      <h2 class="text-lg font-semibold text-blue-900 mb-2">
        Your Utility Provider
      </h2>
      <p class="text-blue-800">
        <strong>{tdspInfo.name}</strong> delivers electricity to all homes and businesses in {cityName}, 
        regardless of which retail provider you choose. They maintain the power lines and respond to outages.
      </p>
      <div class="mt-2 text-sm text-blue-700">
        Service Zone: {tdspInfo.zone} • Tier {tdspInfo.tier} City • DUNS: {tdspInfo.duns}
      </div>
    </div>

    <!-- Plan Filters -->
    <PlanFilters 
      currentFilters={{
        filter,
        term,
        green: greenEnergy,
        type: rateType
      }}
      city={city}
      totalPlans={plans.length}
    />

    <!-- Live Plans Grid -->
    <div class="mb-12">
      {apiError ? (
        <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-6">
          <h2 class="text-xl font-semibold text-yellow-800 mb-2">
            ⚠️ Plans Temporarily Unavailable
          </h2>
          <p class="text-yellow-700 mb-4">
            We're having trouble loading live plans right now: {apiError}
          </p>
          <p class="text-yellow-600 text-sm">
            Please try refreshing the page or check back in a few minutes.
          </p>
        </div>
      ) : (
        <LivePlanGrid 
          plans={plans} 
          cityName={cityName}
          showLoadMore={true}
          maxPlans={12}
        />
      )}
    </div>

    <!-- Quick Actions -->
    {!filterLabel && (
      <div class="mb-12">
        <h2 class="text-2xl font-bold text-gray-900 mb-6 text-center">Popular Filter Options</h2>
        <div class="grid md:grid-cols-3 gap-6">
          <a href={`/texas/${city}?filter=12-month`} class="block p-6 bg-white rounded-lg shadow-sm border hover:shadow-md transition-shadow hover:border-blue-300">
            <h3 class="text-lg font-semibold text-blue-600 mb-2">12-Month Plans</h3>
            <p class="text-gray-600">Fixed rates for one year with rate protection</p>
          </a>
          
          <a href={`/texas/${city}?filter=green-energy`} class="block p-6 bg-white rounded-lg shadow-sm border hover:shadow-md transition-shadow hover:border-green-300">
            <h3 class="text-lg font-semibold text-green-600 mb-2">Green Energy</h3>
            <p class="text-gray-600">100% renewable electricity from wind and solar</p>
          </a>
          
          <a href={`/texas/${city}?filter=fixed-rate`} class="block p-6 bg-white rounded-lg shadow-sm border hover:shadow-md transition-shadow hover:border-purple-300">
            <h3 class="text-lg font-semibold text-purple-600 mb-2">Fixed Rates</h3>
            <p class="text-gray-600">Stable pricing that won't change during your contract</p>
          </a>
        </div>
      </div>
    )}

    <!-- Debug Info -->
    <div class="mt-12 p-4 bg-gray-100 rounded-lg text-sm">
      <h4 class="font-semibold mb-2">Debug Information:</h4>
      <ul class="space-y-1 text-gray-600">
        <li>City Slug: {city}</li>
        <li>City Name: {cityName}</li>
        <li>TDSP: {tdspInfo.name}</li>
        <li>DUNS: {tdspInfo.duns}</li>
        <li>Zone: {tdspInfo.zone}</li>
        <li>Tier: {tdspInfo.tier}</li>
        <li>Priority: {tdspInfo.priority}</li>
      </ul>
    </div>
  </div>
</Layout>

<style>
  /* Remove gradient text effect to keep text white for better visibility */
</style>