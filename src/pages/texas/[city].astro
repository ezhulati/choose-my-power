---
/**
 * Unified City Page with Faceted Design System
 * Updated to use same components and design as faceted pages
 * Maintains backward compatibility while providing modern UX
 */

import Layout from '../../layouts/Layout.astro';
import HeroBackground from '../../components/HeroBackground.astro';
import FacetedPlanGrid from '../../components/faceted/FacetedPlanGrid.astro';
import StandardZipInput from '../../components/StandardZipInput.astro';
import { facetedRouter } from '../../lib/faceted/faceted-router';
import { filterMapper } from '../../lib/api/filter-mapper';
import { generateFacetedMeta } from '../../lib/seo/meta-generator-scale';
import { generateFacetedSchema } from '../../lib/seo/schema-scale';
import { getHeroImage, extractContextFromPath } from '../../lib/images/hero-image-mapper';
import { tdspMapping, municipalUtilities, formatCityName, validateCitySlug, getTdspFromCity, formatCitySlug } from '../../config/tdsp-mapping';
import { comparePowerClient } from '../../lib/api/comparepower-client';
import type { Plan } from '../../types/facets';
import EnhancedSection from '../../components/ui/EnhancedSection.astro';
import EnhancedCard from '../../components/ui/EnhancedCard.astro';
import EnhancedList from '../../components/ui/EnhancedList.astro';
import AccentBox from '../../components/ui/AccentBox.astro';

export const prerender = false;

const { city } = Astro.params;
const url = new URL(Astro.request.url);

console.log(`🏙️  City page requested: ${city}`);

// Redirect URLs with -tx suffix to clean URLs (for development and production consistency)
if (city && city.endsWith('-tx')) {
  const cleanCity = city.replace(/-tx$/, '');
  console.log(`🔄 Redirecting from ${city} to ${cleanCity}`);
  return Astro.redirect(`/texas/${cleanCity}`, 301);
}

// Clean city slug (no -tx suffix needed)
const citySlug = formatCitySlug(city || '');

// Validate city exists using clean city names
if (!city || !validateCitySlug(citySlug)) {
  console.error(`Invalid city: ${city} (cleaned as: ${citySlug})`);
  return Astro.redirect('/404', 404);
}

const tdspDuns = getTdspFromCity(citySlug);
const cityName = formatCityName(citySlug);
const tdspInfo = tdspMapping[citySlug];

if (!tdspDuns || !tdspInfo) {
  console.error(`No TDSP mapping found for city: ${city}`);
  return Astro.redirect('/404', 404);
}

// Check if this is a municipal utility city and redirect appropriately
if (tdspInfo.municipal && municipalUtilities[citySlug]) {
  console.log(`🏛️  Municipal utility detected for ${cityName}, redirecting to municipal utility page`);
  return Astro.redirect(`/texas/${citySlug}/municipal-utility`, 302);
}

// Handle legacy URL parameters by showing appropriate content
const filter = url.searchParams.get('filter');
const term = url.searchParams.get('term');
const greenEnergy = url.searchParams.get('green');
const rateType = url.searchParams.get('type');
const sort = url.searchParams.get('sort');

// Set canonical URL to point to faceted navigation for legacy parameters
let redirectSegments: string[] = [];
if (filter === '12-month' || term === '12') redirectSegments.push('12-month');
else if (term && ['6', '24', '36'].includes(term)) redirectSegments.push(`${term}-month`);
if (filter === 'fixed-rate' || rateType === 'fixed') redirectSegments.push('fixed-rate');
else if (rateType === 'variable') redirectSegments.push('variable-rate');
else if (rateType === 'indexed') redirectSegments.push('indexed-rate');
if (filter === 'green-energy' || greenEnergy === '100') redirectSegments.push('green-energy');

// Show notice about canonical URL for legacy parameters instead of redirecting
const hasLegacyParams = redirectSegments.length > 0 || (filter || term || greenEnergy || rateType);
const suggestedCanonicalUrl = hasLegacyParams ? `/electricity-plans/${city}/${redirectSegments.join('/')}/` : null;

// Use faceted system for consistency - no filters for base city page
const filterSegments: string[] = [];
const appliedFilters: any[] = [];

// Fetch plans using the same system as faceted pages
let plans: Plan[] = [];
let apiError: string | null = null;

try {
  console.log(`Fetching plans for ${cityName} (DUNS: ${tdspDuns})`);
  
  // Use standard API params for city overview
  const apiParams = {
    tdsp_duns: tdspDuns,
    display_usage: 1000 // Standard 1000 kWh usage
  };
  
  plans = await comparePowerClient.fetchPlans(apiParams);
  
  console.log(`✅ Successfully fetched ${plans.length} plans for ${cityName}`);
} catch (error) {
  console.error(`❌ Error fetching plans for ${cityName}:`, error);
  apiError = error instanceof Error ? error.message : 'Unable to load plans at this time';
}

// Generate SEO metadata using the same system as faceted pages
const currentUrl = `/texas/${city}/`;
const canonicalUrl = suggestedCanonicalUrl || `/electricity-plans/${city}/`; // Point to faceted URL as canonical
const lowestRate = plans.length > 0 ? Math.min(...plans.map(p => parseFloat(p.rate) || 999)) : 0;
const cityTier = tdspInfo.tier || 3;

// Generate meta using the same system as faceted pages
const metaTags = await generateFacetedMeta({
  city: cityName,
  filters: appliedFilters,
  planCount: plans.length,
  lowestRate,
  location: cityName,
  cityTier,
  isStatic: false
});

// Generate structured data using the same system
const breadcrumbs = [
  { name: 'Home', url: '/' },
  { name: 'Texas Electricity', url: '/texas/' },
  { name: cityName.replace(', TX', ''), url: `/texas/${city}/` }
];

const schemas = generateFacetedSchema({
  city: cityName,
  filters: appliedFilters,
  plans,
  meta: metaTags,
  tdspInfo: { name: tdspInfo.name, duns: tdspDuns },
  url: currentUrl,
  planCount: plans.length,
  lowestRate
});

// Use conversational messaging for title and description
const pageTitle = `Find Your Best Electricity Rate in ${cityName}, TX | ChooseMyPower`;
const pageDescription = `Moving to ${cityName}? Don't transfer your old plan. Get a rate matched to your new home's size and usage. Compare ${plans.length} plans from licensed electricity companies and choose with confidence.`;

// Get suggested filters using faceted system
const suggestedFilters = facetedRouter.getSuggestedFilters(citySlug, filterSegments, 6);
const suggestedFilterDefinitions = suggestedFilters.map(pattern => ({
  pattern,
  definition: filterMapper.getDefinitionByPattern(pattern)
})).filter(item => item.definition);

// Get contextual hero image
const heroContext = extractContextFromPath(currentUrl);
const heroImage = getHeroImage({
  pageType: 'city',
  location: city,
  filters: filterSegments
});
---

<Layout 
  title={pageTitle}
  description={pageDescription}
  canonical={canonicalUrl}
  ogImage={metaTags.ogImage}
>
  <!-- Schema.org structured data -->
  <script type="application/ld+json" set:html={JSON.stringify(schemas)} />
  
  <!-- Additional meta tags for consistency with faceted pages -->
  <meta property="og:title" content={pageTitle} />
  <meta property="og:description" content={pageDescription} />
  <meta property="og:url" content={canonicalUrl} />
  <meta property="og:type" content="website" />
  
  <!-- City-specific meta -->
  <meta name="geo.region" content="TX" />
  <meta name="geo.placename" content={cityName} />
  
  <main class="min-h-screen bg-gray-50">
    <!-- Hero Section with Faceted Design -->
    <HeroBackground 
      imageUrl={heroImage} 
      overlayOpacity={0.75}
    >
      <section class="text-white flex items-center justify-center min-h-[33vh] lg:min-h-[40vh]">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          <!-- Breadcrumb Navigation -->
          <nav class="mb-8" aria-label="Breadcrumb">
            <div class="flex items-center space-x-4 text-sm">
              {breadcrumbs.map((breadcrumb, index) => (
                <Fragment key={breadcrumb.url}>
                  {index > 0 && <span class="text-white/60">/</span>}
                  <a 
                    href={breadcrumb.url}
                    class={index === breadcrumbs.length - 1 
                      ? "text-white font-medium drop-shadow-sm" 
                      : "text-white/80 hover:text-white transition-colors drop-shadow-sm"
                    }
                  >
                    {breadcrumb.name}
                  </a>
                </Fragment>
              ))}
            </div>
          </nav>

          <!-- Page Header -->
          <div class="text-center">
            <h1 class="text-4xl md:text-6xl lg:text-7xl font-bold mb-6 drop-shadow-lg">
              {cityName.replace(', TX', '')} Electricity Plans
            </h1>
            <p class="text-xl lg:text-2xl text-white/90 mb-6 drop-shadow-md leading-relaxed max-w-4xl mx-auto">
              Moving to {cityName}? Don't transfer your old plan. Get a rate matched to your new home's size and usage—no overwhelming lists or confusing rates.
            </p>
            <div class="text-white/80 drop-shadow-sm">
              <span class="text-lg lg:text-xl">We show {plans.length} plans from licensed electricity companies so you can choose with confidence.</span>
              {apiError && (
                <span class="ml-2 text-texas-gold-200">• Loading plans...</span>
              )}
            </div>
          </div>
        </div>
      </section>
    </HeroBackground>

    <!-- Legacy Parameter Notice -->
    {hasLegacyParams && suggestedCanonicalUrl && (
      <div class="bg-texas-cream-200 border border-texas-navy/20 rounded-md p-4 mx-4 mb-6">
        <div class="flex">
          <div class="flex-shrink-0">
            <svg class="h-5 w-5 text-texas-navy" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd" />
            </svg>
          </div>
          <div class="ml-3">
            <h3 class="text-sm font-medium text-texas-navy">
              Filter Applied
            </h3>
            <div class="mt-2 text-sm text-texas-navy">
              <p>You've applied filters to your search. For the most up-to-date results, visit our enhanced filter page:</p>
              <a href={suggestedCanonicalUrl} class="mt-2 inline-block font-medium text-texas-navy hover:text-texas-red">
                View Filtered Results →
              </a>
            </div>
          </div>
        </div>
      </div>
    )}

    <!-- Error Handling -->
    {apiError && (
      <div class="bg-red-50 border border-red-200 rounded-md p-4 mx-4 mb-6">
        <div class="flex">
          <div class="flex-shrink-0">
            <svg class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
            </svg>
          </div>
          <div class="ml-3">
            <h3 class="text-sm font-medium text-red-800">
              Unable to load electricity plans
            </h3>
            <div class="mt-2 text-sm text-red-700">
              <p>We're experiencing technical difficulties. Please try again later or contact support.</p>
              <p class="mt-1 text-xs">Error: {apiError}</p>
            </div>
          </div>
        </div>
      </div>
    )}

    <!-- Main Content with Enhanced Faceted Layout -->
    <EnhancedSection background="gray" padding="lg">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="lg:grid lg:grid-cols-4 lg:gap-8">
          <!-- Enhanced Sidebar with ZIP Lookup and Filter Suggestions -->
          <div class="lg:col-span-1">
            <!-- Enhanced ZIP Lookup Section -->
            <EnhancedCard variant="elevated" padding="lg" className="mb-6">
              <h3 class="text-xl font-semibold text-texas-navy mb-4">Search Another Area</h3>
              <p class="text-sm text-gray-600 mb-4">Find electricity plans for any Texas city or ZIP code.</p>
              <StandardZipInput 
                size="sm"
                variant="compact"
                showTitle={false}
                showDescription={false}
                customClass="w-full"
              />
            </EnhancedCard>
            
            <!-- Enhanced Filter Suggestions -->
            <EnhancedCard variant="gradient" padding="lg">
              <h3 class="text-xl font-semibold text-texas-navy mb-4">Refine Your Search</h3>
              <p class="text-sm text-gray-600 mb-6">Narrow down plans by your specific needs and preferences.</p>
              <div class="space-y-6">
                {suggestedFilterDefinitions.map((item) => (
                  <div key={item.definition.type}>
                    <h4 class="text-base font-medium text-texas-navy mb-3">
                      {item.definition.description}
                    </h4>
                    <div class="space-y-2">
                      {item.definition.urlPatterns.slice(0, item.definition.type === 'providers' ? 12 : 6).map((pattern) => {
                        const newUrl = `/electricity-plans/${city}/${pattern}/`;
                        
                        return (
                          <a
                            key={pattern}
                            href={newUrl}
                            class="block text-sm px-3 py-2 rounded-lg transition-all duration-200 text-gray-700 hover:bg-texas-cream-200 hover:text-texas-navy font-medium bg-white/50"
                          >
                            {item.definition.displayName(pattern)}
                          </a>
                        );
                      })}
                    </div>
                  </div>
                ))}
              </div>
            </EnhancedCard>
          </div>

          <!-- Enhanced Plans Grid using Faceted Component -->
          <div class="lg:col-span-3 mt-8 lg:mt-0">
            <EnhancedCard variant="elevated" padding="none">
              <div class="p-6 border-b border-gray-200">
                <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between">
                  <div>
                    <h2 class="text-2xl font-bold text-texas-navy mb-2">
                      Electricity Plans for {cityName.replace(', TX', '')}
                    </h2>
                    <p class="text-gray-600">Licensed providers • Real rates • No hidden fees</p>
                  </div>
                  {plans.length > 0 && (
                    <AccentBox accentColor="gold" padding="sm" className="mt-4 sm:mt-0">
                      <span class="text-sm font-semibold">{plans.length} Plans Available</span>
                    </AccentBox>
                  )}
                </div>
              </div>
              <FacetedPlanGrid 
                plans={plans}
                city={cityName}
                appliedFilters={appliedFilters}
                totalCount={plans.length}
                loading={false}
                error={apiError}
              />
            </EnhancedCard>
          </div>
        </div>
      </div>
    </EnhancedSection>

    <!-- Enhanced Related Links Section -->
    <EnhancedSection background="cream" padding="xl">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="text-center mb-12">
          <h2 class="text-3xl md:text-4xl font-bold text-texas-navy mb-4">
            Popular Plan Options in {cityName.replace(', TX', '')}
          </h2>
          <p class="text-lg text-gray-700 max-w-2xl mx-auto">
            Explore specialized electricity plans tailored to your specific needs and preferences.
          </p>
        </div>
        
        <div class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
          {['12-month', '24-month', 'fixed-rate', 'green-energy', 'prepaid', 'no-deposit'].map((filter) => {
            const newUrl = `/electricity-plans/${city}/${filter}/`;
            const definition = filterMapper.getDefinitionByPattern(filter);
            const displayName = definition?.displayName(filter) || filter.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
            
            return (
              <a
                key={filter}
                href={newUrl}
                class="group bg-white p-6 rounded-xl shadow-lg hover:shadow-2xl border border-gray-200 hover:border-texas-gold transition-all duration-300 hover:-translate-y-2 text-center"
              >
                <div class="w-12 h-12 bg-texas-navy/10 rounded-full flex items-center justify-center mx-auto mb-4 group-hover:bg-texas-gold/20 transition-colors">
                  <svg class="w-6 h-6 text-texas-navy group-hover:text-texas-gold transition-colors" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
                  </svg>
                </div>
                <div class="text-base font-semibold text-texas-navy group-hover:text-texas-gold transition-colors mb-2">
                  {displayName}
                </div>
                <div class="text-sm text-gray-600">Available in {cityName.replace(', TX', '')}</div>
              </a>
            );
          })}
        </div>
        
        <!-- Enhanced CTA Section -->
        <div class="text-center mt-16">
          <AccentBox accentColor="navy" padding="lg">
            <h3 class="text-xl font-bold text-texas-navy mb-3">
              Need Help Choosing the Right Plan?
            </h3>
            <p class="text-gray-700 mb-6 max-w-2xl mx-auto">
              Texas electricity can be complicated. Get personalized recommendations based on your home size, usage patterns, and budget.
            </p>
            <div class="flex flex-col sm:flex-row gap-4 justify-center">
              <a href="/resources/guides/choosing-a-provider" class="inline-flex items-center px-6 py-3 bg-texas-red text-white font-semibold rounded-lg hover:bg-texas-red-600 transition-colors">
                Get Expert Guidance
                <svg class="ml-2 w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                </svg>
              </a>
              <a href="/compare/plans" class="inline-flex items-center px-6 py-3 bg-texas-navy text-white font-semibold rounded-lg hover:bg-blue-800 transition-colors">
                Compare All Plans
                <svg class="ml-2 w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v4a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                </svg>
              </a>
            </div>
          </AccentBox>
        </div>
      </div>
    </EnhancedSection>
  </main>
</Layout>

<style>
  /* Remove gradient text effect to keep text white for better visibility */
</style>