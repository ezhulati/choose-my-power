---
/**
 * Unified City Page with Faceted Design System
 * Updated to use same components and design as faceted pages
 * Maintains backward compatibility while providing modern UX
 */

import Layout from '../../layouts/Layout.astro';
import HeroBackground from '../../components/HeroBackground.astro';
import FacetedPlanGrid from '../../components/faceted/FacetedPlanGrid.astro';
import { facetedRouter } from '../../lib/faceted/faceted-router';
import { filterMapper } from '../../lib/api/filter-mapper';
import { generateFacetedMeta } from '../../lib/seo/meta-generator-scale';
import { generateFacetedSchema } from '../../lib/seo/schema-scale';
import { getHeroImage, extractContextFromPath } from '../../lib/images/hero-image-mapper';
import { tdspMapping, formatCityName, validateCitySlug, getTdspFromCity } from '../../config/tdsp-mapping';
import { comparePowerClient } from '../../lib/api/comparepower-client';
import type { Plan } from '../../types/facets';

export const prerender = false;

const { city } = Astro.params;
const url = new URL(Astro.request.url);

console.log(`🏙️  City page requested: ${city}`);

// Validate city exists using faceted system
if (!city || !validateCitySlug(city)) {
  console.error(`Invalid city: ${city}`);
  return Astro.redirect('/404', 404);
}

const tdspDuns = getTdspFromCity(city);
const cityName = formatCityName(city);
const tdspInfo = tdspMapping[city];

if (!tdspDuns || !tdspInfo) {
  console.error(`No TDSP mapping found for city: ${city}`);
  return Astro.redirect('/404', 404);
}

// Handle legacy URL parameters by showing appropriate content
const filter = url.searchParams.get('filter');
const term = url.searchParams.get('term');
const greenEnergy = url.searchParams.get('green');
const rateType = url.searchParams.get('type');
const sort = url.searchParams.get('sort');

// Set canonical URL to point to faceted navigation for legacy parameters
let redirectSegments: string[] = [];
if (filter === '12-month' || term === '12') redirectSegments.push('12-month');
else if (term && ['6', '24', '36'].includes(term)) redirectSegments.push(`${term}-month`);
if (filter === 'fixed-rate' || rateType === 'fixed') redirectSegments.push('fixed-rate');
else if (rateType === 'variable') redirectSegments.push('variable-rate');
else if (rateType === 'indexed') redirectSegments.push('indexed-rate');
if (filter === 'green-energy' || greenEnergy === '100') redirectSegments.push('green-energy');

// Show notice about canonical URL for legacy parameters instead of redirecting
const hasLegacyParams = redirectSegments.length > 0 || (filter || term || greenEnergy || rateType);
const suggestedCanonicalUrl = hasLegacyParams ? `/electricity-plans/${city}/${redirectSegments.join('/')}/` : null;

// Use faceted system for consistency - no filters for base city page
const filterSegments: string[] = [];
const appliedFilters: any[] = [];

// Fetch plans using the same system as faceted pages
let plans: Plan[] = [];
let apiError: string | null = null;

try {
  console.log(`Fetching plans for ${cityName} (DUNS: ${tdspDuns})`);
  
  // Use standard API params for city overview
  const apiParams = {
    tdsp_duns: tdspDuns,
    display_usage: 1000 // Standard 1000 kWh usage
  };
  
  plans = await comparePowerClient.fetchPlans(apiParams);
  
  console.log(`✅ Successfully fetched ${plans.length} plans for ${cityName}`);
} catch (error) {
  console.error(`❌ Error fetching plans for ${cityName}:`, error);
  apiError = error instanceof Error ? error.message : 'Unable to load plans at this time';
}

// Generate SEO metadata using the same system as faceted pages
const currentUrl = `/texas/${city}/`;
const canonicalUrl = suggestedCanonicalUrl || `/electricity-plans/${city}/`; // Point to faceted URL as canonical
const lowestRate = plans.length > 0 ? Math.min(...plans.map(p => parseFloat(p.rate) || 999)) : 0;
const cityTier = tdspInfo.tier || 3;

// Generate meta using the same system as faceted pages
const metaTags = await generateFacetedMeta({
  city: cityName,
  filters: appliedFilters,
  planCount: plans.length,
  lowestRate,
  location: cityName,
  cityTier,
  isStatic: false
});

// Generate structured data using the same system
const breadcrumbs = [
  { name: 'Home', url: '/' },
  { name: 'Texas Electricity', url: '/texas/' },
  { name: `${cityName} Plans`, url: `/texas/${city}/` }
];

const schemas = generateFacetedSchema({
  city: cityName,
  filters: appliedFilters,
  plans,
  meta: metaTags,
  tdspInfo: { name: tdspInfo.name, duns: tdspDuns },
  url: currentUrl,
  planCount: plans.length,
  lowestRate
});

// Use faceted title and description generation
const pageTitle = `Best Electricity Plans in ${cityName}, TX | Compare Energy Rates`;
const pageDescription = `Compare electricity plans in ${cityName}, Texas. Find the best energy rates and switch providers.`;

// Get suggested filters using faceted system
const suggestedFilters = facetedRouter.getSuggestedFilters(city, filterSegments, 6);
const suggestedFilterDefinitions = suggestedFilters.map(pattern => ({
  pattern,
  definition: filterMapper.getDefinitionByPattern(pattern)
})).filter(item => item.definition);

// Get contextual hero image
const heroContext = extractContextFromPath(currentUrl);
const heroImage = getHeroImage({
  pageType: 'city',
  location: city,
  filters: filterSegments
});
---

<Layout 
  title={pageTitle}
  description={pageDescription}
  canonical={canonicalUrl}
  ogImage={metaTags.ogImage}
>
  <!-- Schema.org structured data -->
  <script type="application/ld+json" set:html={JSON.stringify(schemas)} />
  
  <!-- Additional meta tags for consistency with faceted pages -->
  <meta property="og:title" content={pageTitle} />
  <meta property="og:description" content={pageDescription} />
  <meta property="og:url" content={canonicalUrl} />
  <meta property="og:type" content="website" />
  
  <!-- City-specific meta -->
  <meta name="geo.region" content="TX" />
  <meta name="geo.placename" content={cityName} />
  
  <main class="min-h-screen bg-gray-50">
    <!-- Hero Section with Faceted Design -->
    <HeroBackground 
      imageUrl={heroImage} 
      overlayOpacity={0.75}
    >
      <section class="text-white flex items-center justify-center min-h-[33vh] lg:min-h-[40vh]">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          <!-- Breadcrumb Navigation -->
          <nav class="mb-8" aria-label="Breadcrumb">
            <div class="flex items-center space-x-4 text-sm">
              {breadcrumbs.map((breadcrumb, index) => (
                <Fragment key={breadcrumb.url}>
                  {index > 0 && <span class="text-blue-200">/</span>}
                  <a 
                    href={breadcrumb.url}
                    class={index === breadcrumbs.length - 1 
                      ? "text-white font-medium drop-shadow-sm" 
                      : "text-blue-200 hover:text-white transition-colors drop-shadow-sm"
                    }
                  >
                    {breadcrumb.name}
                  </a>
                </Fragment>
              ))}
            </div>
          </nav>

          <!-- Page Header -->
          <div class="text-center">
            <h1 class="text-4xl md:text-6xl lg:text-7xl font-bold mb-6 drop-shadow-lg">
              Electricity Plans
            </h1>
            <p class="text-xl lg:text-2xl text-blue-100 mb-6 drop-shadow-md leading-relaxed max-w-4xl mx-auto">
              Compare electricity plans in {cityName}, Texas
            </p>
            <div class="text-blue-200 drop-shadow-sm">
              <span class="text-lg lg:text-xl">{plans.length} plans available</span>
              {apiError && (
                <span class="ml-2 text-amber-200">• Loading plans...</span>
              )}
            </div>
          </div>
        </div>
      </section>
    </HeroBackground>

    <!-- Legacy Parameter Notice -->
    {hasLegacyParams && suggestedCanonicalUrl && (
      <div class="bg-blue-50 border border-blue-200 rounded-md p-4 mx-4 mb-6">
        <div class="flex">
          <div class="flex-shrink-0">
            <svg class="h-5 w-5 text-blue-400" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd" />
            </svg>
          </div>
          <div class="ml-3">
            <h3 class="text-sm font-medium text-blue-800">
              Filter Applied
            </h3>
            <div class="mt-2 text-sm text-blue-700">
              <p>You've applied filters to your search. For the most up-to-date results, visit our enhanced filter page:</p>
              <a href={suggestedCanonicalUrl} class="mt-2 inline-block font-medium text-blue-600 hover:text-blue-500">
                View Filtered Results →
              </a>
            </div>
          </div>
        </div>
      </div>
    )}

    <!-- Error Handling -->
    {apiError && (
      <div class="bg-red-50 border border-red-200 rounded-md p-4 mx-4 mb-6">
        <div class="flex">
          <div class="flex-shrink-0">
            <svg class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
            </svg>
          </div>
          <div class="ml-3">
            <h3 class="text-sm font-medium text-red-800">
              Unable to load electricity plans
            </h3>
            <div class="mt-2 text-sm text-red-700">
              <p>We're experiencing technical difficulties. Please try again later or contact support.</p>
              <p class="mt-1 text-xs">Error: {apiError}</p>
            </div>
          </div>
        </div>
      </div>
    )}

    <!-- Main Content with Faceted Layout -->
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <div class="lg:grid lg:grid-cols-4 lg:gap-8">
        <!-- Sidebar with Filter Suggestions -->
        <div class="lg:col-span-1">
          <div class="bg-white rounded-lg shadow p-6">
            <h3 class="text-lg font-medium text-gray-900 mb-4">Refine Your Search</h3>
            <div class="space-y-4">
              {suggestedFilterDefinitions.map((item) => (
                <div key={item.definition.type}>
                  <h4 class="text-sm font-medium text-gray-700 mb-2">
                    {item.definition.description}
                  </h4>
                  <div class="space-y-2">
                    {item.definition.urlPatterns.slice(0, item.definition.type === 'providers' ? 12 : 6).map((pattern) => {
                      const newUrl = `/electricity-plans/${city}/${pattern}/`;
                      
                      return (
                        <a
                          key={pattern}
                          href={newUrl}
                          class="block text-sm px-3 py-2 rounded-md transition-colors text-gray-600 hover:bg-gray-100 hover:text-gray-900"
                        >
                          {item.definition.displayName(pattern)}
                        </a>
                      );
                    })}
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>

        <!-- Plans Grid using Faceted Component -->
        <div class="lg:col-span-3 mt-8 lg:mt-0">
          <FacetedPlanGrid 
            plans={plans}
            city={cityName}
            appliedFilters={appliedFilters}
            totalCount={plans.length}
            loading={false}
            error={apiError}
          />
        </div>
      </div>
    </div>

    <!-- Related Links Section using Faceted Design -->
    <div class="bg-gray-100 py-12 mt-12">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <h2 class="text-xl font-bold text-gray-900 mb-6">Popular Electricity Plan Options in {cityName}</h2>
        <div class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
          {['12-month', '24-month', 'fixed-rate', 'green-energy', 'prepaid', 'no-deposit'].map((filter) => {
            const newUrl = `/electricity-plans/${city}/${filter}/`;
            const definition = filterMapper.getDefinitionByPattern(filter);
            const displayName = definition?.displayName(filter) || filter.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
            
            return (
              <a
                key={filter}
                href={newUrl}
                class="bg-white p-4 rounded-lg shadow hover:shadow-md transition-shadow border border-gray-200"
              >
                <div class="text-sm font-medium text-gray-900">{displayName}</div>
                <div class="text-xs text-gray-500 mt-1">Plans in {cityName}</div>
              </a>
            );
          })}
        </div>
      </div>
    </div>
  </main>
</Layout>

<style>
  /* Remove gradient text effect to keep text white for better visibility */
</style>