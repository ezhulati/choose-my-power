---
import '../index.css';

export interface Props {
  title: string;
  description?: string;
  canonical?: string;
  robotsMeta?: string;
  noIndex?: boolean;
  ogImage?: string;
  keywords?: string;
}

const { 
  title, 
  description = "Expert analysis of 50+ electricity providers and 300+ plans. Find the perfect match for your needs and save hundreds per year.",
  canonical = "https://choosemypower.org",
  robotsMeta = "index, follow",
  noIndex = false,
  ogImage = "/images/og-default.jpg",
  keywords
} = Astro.props;

// Ensure OG image is absolute URL for social sharing
const absoluteOgImage = ogImage.startsWith('http') ? ogImage : `https://choosemypower.org${ogImage}`;
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    
    <!-- Security headers removed - now handled by HTTP headers in netlify.toml for better CSP support -->
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <title>{title}</title>
    
    <!-- Robots Meta Tag -->
    <meta name="robots" content={noIndex ? "noindex, follow" : robotsMeta} />
    
    <!-- Keywords (if provided) -->
    {keywords && <meta name="keywords" content={keywords} />}
    
    <!-- SEO Meta Tags -->
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:type" content="website" />
    <meta property="og:url" content={canonical} />
    <meta property="og:image" content={absoluteOgImage} />
    <meta property="og:image:width" content="1200" />
    <meta property="og:image:height" content="630" />
    <meta property="og:site_name" content="ChooseMyPower.org" />
    
    <!-- Twitter Meta Tags -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content={absoluteOgImage} />
    <meta name="twitter:site" content="@choosemypower" />
    
    <!-- Canonical URL -->
    <link rel="canonical" href={canonical} />
    
    <!-- Additional SEO Tags -->
    <meta name="author" content="ChooseMyPower.org" />
    <meta name="theme-color" content="#2563eb" />
    
    <!-- Sitemap Reference -->
    <link rel="sitemap" type="application/xml" href="/sitemap.xml" />
    
    <!-- Font optimization for Core Web Vitals with reliable Google Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    
    <!-- Load Google Fonts CSS with font-display: swap -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet" />
    
    <!-- Critical CSS for immediate rendering -->
    <style>
      /* Critical CSS reset for CLS prevention - fonts loaded via Google Fonts CSS */
      *, *::before, *::after {
        box-sizing: border-box;
      }
      
      html {
        line-height: 1.5;
        -webkit-text-size-adjust: 100%;
        -moz-tab-size: 4;
        tab-size: 4;
        font-family: Inter, ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif;
        font-feature-settings: normal;
      }
      
      body {
        margin: 0;
        line-height: inherit;
        font-family: inherit;
        color: #1f2937;
        background-color: #ffffff;
      }

      /* Critical layout containers to prevent CLS */
      .main-container {
        min-height: 100vh;
        display: flex;
        flex-direction: column;
      }
      
      .header {
        flex-shrink: 0;
        height: 80px; /* Reserve space for header */
      }
      
      .main-content {
        flex: 1 0 auto;
        min-height: calc(100vh - 80px);
      }
      
      .footer {
        flex-shrink: 0;
        margin-top: auto;
      }

      /* Critical typography for LCP optimization */
      h1, h2, h3, h4, h5, h6 {
        margin: 0;
        font-weight: 600;
        line-height: 1.25;
      }
      
      h1 { font-size: 2.25rem; }
      h2 { font-size: 1.875rem; }
      h3 { font-size: 1.5rem; }
      
      p {
        margin: 0 0 1rem 0;
        line-height: 1.6;
      }

      /* Critical button styles for above-fold CTAs */
      .btn {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        padding: 0.75rem 1.5rem;
        border-radius: 0.5rem;
        font-weight: 600;
        text-decoration: none;
        transition: all 0.2s ease-in-out;
        cursor: pointer;
        border: 2px solid transparent;
        font-size: 1rem;
        line-height: 1.25;
        min-height: 44px; /* Touch target size */
      }
      
      .btn-primary {
        background-color: #dc2626;
        color: white;
        border-color: #dc2626;
      }
      
      .btn-primary:hover {
        background-color: #b91c1c;
        border-color: #b91c1c;
        transform: translateY(-1px);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.12);
      }

      /* Critical utilities to prevent CLS */
      .container {
        width: 100%;
        max-width: 1200px;
        margin: 0 auto;
        padding-left: 1rem;
        padding-right: 1rem;
      }
      
      .text-center { text-align: center; }
      .flex { display: flex; }
      .items-center { align-items: center; }
      .justify-center { justify-content: center; }
      .space-y-4 > * + * { margin-top: 1rem; }
      .mb-4 { margin-bottom: 1rem; }
      .mb-8 { margin-bottom: 2rem; }
      .py-8 { padding-top: 2rem; padding-bottom: 2rem; }

      /* Image optimization for CLS prevention */
      img {
        max-width: 100%;
        height: auto;
        border-style: none;
      }
      
      img[width][height] {
        aspect-ratio: attr(width) / attr(height);
      }

      /* Loading states to improve perceived performance */
      .loading-skeleton {
        background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
        background-size: 200% 100%;
        animation: loading 1.5s infinite;
      }
      
      @keyframes loading {
        0% { background-position: 200% 0; }
        100% { background-position: -200% 0; }
      }

      /* Responsive design for mobile-first approach */
      @media (max-width: 768px) {
        .container {
          padding-left: 0.75rem;
          padding-right: 0.75rem;
        }
        
        h1 { font-size: 1.875rem; }
        h2 { font-size: 1.5rem; }
        h3 { font-size: 1.25rem; }
        
        .btn {
          padding: 0.875rem 2rem;
          width: 100%;
          max-width: 320px;
        }
      }

      /* Performance optimizations */
      * {
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
      }
      
      /* Reduce motion for users who prefer it */
      @media (prefers-reduced-motion: reduce) {
        *, *::before, *::after {
          animation-duration: 0.01ms !important;
          animation-iteration-count: 1 !important;
          transition-duration: 0.01ms !important;
        }
      }
      
      /* High contrast support */
      @media (prefers-contrast: high) {
        .btn-primary {
          border-width: 3px;
        }
      }
    </style>
    
    <!-- DNS prefetch for external resources -->
    <link rel="dns-prefetch" href="//api.comparepower.com" />
    <link rel="dns-prefetch" href="//pricing.api.comparepower.com" />
    
    <!-- Preload critical resources -->
    <link rel="modulepreload" href="/assets/js/00-vendor-react.js" />
    <link rel="modulepreload" href="/assets/js/01-vendor-ui.js" />
  </head>
  <body>
    <!-- Skip navigation links for accessibility -->
    <a href="#main-content" class="skip-link">Skip to main content</a>
    
    <div class="main-container">
      <div id="main-content" class="main-content">
        <slot />
      </div>
    </div>
    
    <!-- Service Worker Registration for Performance -->
    <script>
      if ('serviceWorker' in navigator) {
        window.addEventListener('load', () => {
          navigator.serviceWorker.register('/sw-core-web-vitals.js')
            .then((registration) => {
              console.log('✅ SW: Core Web Vitals Service Worker registered');
              
              // Listen for updates
              registration.addEventListener('updatefound', () => {
                console.log('🔄 SW: New service worker available');
              });
            })
            .catch((error) => {
              console.warn('❌ SW: Service Worker registration failed:', error);
            });
        });
        
        // Listen for service worker messages
        navigator.serviceWorker.addEventListener('message', (event) => {
          if (event.data && event.data.type === 'PERFORMANCE_UPDATE') {
            console.log('📊 SW: Performance update:', event.data.metrics);
          }
        });
      }
    </script>
    
    <!-- Core Web Vitals Monitoring -->
    <script>
      // Initialize Core Web Vitals monitoring
      window.addEventListener('load', () => {
        // Import Web Vitals library dynamically to avoid blocking
        import('https://unpkg.com/web-vitals@3?module')
          .then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
            // Track all Core Web Vitals
            getCLS((metric) => {
              console.log('📊 CLS:', metric.value);
              if (typeof gtag !== 'undefined') {
                gtag('event', 'web_vitals', {
                  event_category: 'Performance',
                  event_label: 'CLS',
                  value: Math.round(metric.value * 1000),
                  non_interaction: true
                });
              }
            });
            
            getFID((metric) => {
              console.log('📊 FID:', metric.value);
              if (typeof gtag !== 'undefined') {
                gtag('event', 'web_vitals', {
                  event_category: 'Performance',
                  event_label: 'FID',
                  value: Math.round(metric.value),
                  non_interaction: true
                });
              }
            });
            
            getFCP((metric) => {
              console.log('📊 FCP:', metric.value);
              if (typeof gtag !== 'undefined') {
                gtag('event', 'web_vitals', {
                  event_category: 'Performance',
                  event_label: 'FCP',
                  value: Math.round(metric.value),
                  non_interaction: true
                });
              }
            });
            
            getLCP((metric) => {
              console.log('📊 LCP:', metric.value);
              if (typeof gtag !== 'undefined') {
                gtag('event', 'web_vitals', {
                  event_category: 'Performance',
                  event_label: 'LCP',
                  value: Math.round(metric.value),
                  non_interaction: true
                });
              }
            });
            
            getTTFB((metric) => {
              console.log('📊 TTFB:', metric.value);
              if (typeof gtag !== 'undefined') {
                gtag('event', 'web_vitals', {
                  event_category: 'Performance',
                  event_label: 'TTFB',
                  value: Math.round(metric.value),
                  non_interaction: true
                });
              }
            });
          })
          .catch((error) => {
            console.warn('Web Vitals monitoring failed to load:', error);
          });
      });
      
      // Performance optimization helpers
      window.performanceHelpers = {
        // Preload important pages
        preloadPage: (url) => {
          if ('serviceWorker' in navigator && navigator.serviceWorker.controller) {
            const messageChannel = new MessageChannel();
            navigator.serviceWorker.controller.postMessage({
              type: 'PREFETCH_PAGES',
              pages: [url]
            }, [messageChannel.port2]);
          }
        },
        
        // Get performance metrics
        getMetrics: () => {
          if ('serviceWorker' in navigator && navigator.serviceWorker.controller) {
            const messageChannel = new MessageChannel();
            navigator.serviceWorker.controller.postMessage({
              type: 'GET_METRICS'
            }, [messageChannel.port2]);
            
            return new Promise((resolve) => {
              messageChannel.port1.onmessage = (event) => {
                if (event.data.type === 'METRICS_RESPONSE') {
                  resolve(event.data.data);
                }
              };
            });
          }
          return Promise.resolve(null);
        }
      };
    </script>
    
    <style>
      .skip-link {
        position: absolute;
        top: -40px;
        left: 6px;
        background: #000;
        color: #fff;
        padding: 8px;
        text-decoration: none;
        border-radius: 0 0 4px 4px;
        z-index: 9999;
        font-size: 14px;
        opacity: 0;
        transition: opacity 0.2s, top 0.2s;
      }
      
      .skip-link:focus {
        top: 0;
        opacity: 1;
      }
    </style>
  </body>
</html>