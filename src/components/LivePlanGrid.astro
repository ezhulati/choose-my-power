---
// Live electricity plans grid component
import ProviderLogo from './ProviderLogo.astro';

interface Plan {
  id: string;
  name: string;
  provider: {
    name: string;
    rating?: number;
    reviewCount?: number;
  };
  pricing: {
    rate1000kWh: number;
    ratePerKwh: number;
  };
  contract: {
    length: number;
    type: string;
    earlyTerminationFee?: number;
  };
  features: {
    greenEnergy: number;
    deposit?: {
      required: boolean;
      amount?: number;
    };
  };
}

interface Props {
  plans: Plan[];
  cityName: string;
  showLoadMore?: boolean;
  maxPlans?: number;
}

const { plans, cityName, showLoadMore = true, maxPlans = 12 } = Astro.props;
const displayedPlans = plans.slice(0, maxPlans);
const remainingPlans = Math.max(0, plans.length - maxPlans);

// Identify standout plans
const bestValuePlan = plans.length > 0 ? plans.reduce((prev, current) => 
  (prev.pricing?.rate1000kWh || 999) < (current.pricing?.rate1000kWh || 999) ? prev : current
) : null;

const mostPopularPlan = plans.length > 0 ? plans.find(plan => 
  plan.contract?.length === 12 && 
  plan.contract?.type === 'fixed' &&
  plan.features?.greenEnergy > 0
) || plans[Math.floor(plans.length * 0.2)] : null; // Fallback to top 20% if no ideal match

---

<div class="live-plan-grid">
  {plans.length === 0 ? (
    <!-- No Plans Available -->
    <div class="no-plans bg-gray-50 border-2 border-dashed border-gray-300 rounded-lg p-12 text-center">
      <div class="text-6xl mb-4">âš¡</div>
      <h3 class="text-2xl font-bold text-gray-900 mb-2">Plans Loading...</h3>
      <p class="text-gray-600 max-w-md mx-auto">
        We're fetching the latest electricity plans and rates for {cityName}. 
        This usually takes just a moment.
      </p>
    </div>
  ) : (
    <!-- Plans Grid -->
    <div class="plans-header mb-8">
      <h2 class="text-3xl font-bold text-gray-900 mb-2">
        {plans.length} Live Electricity Plans
      </h2>
      <p class="text-gray-600">
        Updated in real-time â€¢ All fees included â€¢ Ready to enroll today
      </p>
    </div>

    <div id="plans-grid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      {displayedPlans.map((plan, index) => (
        <div class="plan-card bg-white rounded-lg shadow-sm border border-gray-200 hover:shadow-lg transition-all duration-300 overflow-hidden relative">
          <!-- Badges -->
          {bestValuePlan && plan.id === bestValuePlan.id && (
            <div class="absolute top-3 right-3 z-10">
              <div class="bg-green-500 text-white px-2 py-1 rounded-full text-xs font-semibold">
                Best Value
              </div>
            </div>
          )}
          {mostPopularPlan && plan.id === mostPopularPlan.id && plan.id !== bestValuePlan?.id && (
            <div class="absolute top-3 right-3 z-10">
              <div class="bg-purple-500 text-white px-2 py-1 rounded-full text-xs font-semibold">
                Most Popular
              </div>
            </div>
          )}
          
          <!-- Plan Header -->
          <div class="p-6 border-b border-gray-100">
            <div class="flex items-start justify-between mb-4">
              <div class="flex-1 pr-4">
                <h3 class="text-lg font-bold text-gray-900 mb-1">{plan.name}</h3>
                <div class="flex items-center gap-2">
                  <ProviderLogo 
                    provider={plan.provider.name}
                    logo={plan.provider.logo}
                    size="sm"
                  />
                  <p class="text-gray-600 text-sm">{plan.provider.name}</p>
                </div>
              </div>
              <div class="text-right">
                <div class="text-2xl font-bold text-blue-600">
                  {plan.pricing.rate1000kWh.toFixed(1)}Â¢
                </div>
                <div class="text-xs text-gray-500">per kWh</div>
              </div>
            </div>

            <!-- Contract Info -->
            <div class="flex items-center gap-4 text-sm text-gray-600">
              <span class="bg-gray-100 px-2 py-1 rounded">
                {plan.contract.length}-month {plan.contract.type}
              </span>
              {plan.features.greenEnergy > 0 && (
                <span class="bg-green-100 text-green-700 px-2 py-1 rounded flex items-center gap-1">
                  <span>ðŸŒ±</span> {plan.features.greenEnergy}% green
                </span>
              )}
            </div>
          </div>

          <!-- Plan Details -->
          <div class="p-6">
            <div class="space-y-3 mb-6">
              <div class="flex justify-between">
                <span class="text-gray-600">Monthly cost (1000 kWh):</span>
                <span class="font-semibold">${plan.pricing.total1000kWh ? plan.pricing.total1000kWh.toFixed(0) : (plan.pricing.rate1000kWh * 10).toFixed(0)}</span>
              </div>
              
              {plan.contract.earlyTerminationFee && plan.contract.earlyTerminationFee > 0 && (
                <div class="flex justify-between">
                  <span class="text-gray-600">Early termination fee:</span>
                  <span class="font-semibold">${plan.contract.earlyTerminationFee}</span>
                </div>
              )}

              {plan.features.deposit && (
                <div class="flex justify-between">
                  <span class="text-gray-600">Deposit required:</span>
                  <span class="font-semibold">
                    {plan.features.deposit.required 
                      ? `$${plan.features.deposit.amount || 'Varies'}`
                      : 'No deposit'
                    }
                  </span>
                </div>
              )}
            </div>

            <!-- Action Buttons -->
            <div class="space-y-3">
              <button class="w-full bg-red-600 hover:bg-red-700 text-white py-3 px-4 rounded-lg font-semibold transition-colors" aria-label={`Enroll now in ${plan.name} plan from ${plan.provider.name}`}>
                Enroll Now
              </button>
              <button class="w-full border border-gray-300 hover:border-gray-400 text-gray-700 py-2 px-4 rounded-lg font-medium transition-colors" aria-label={`View details for ${plan.name} plan from ${plan.provider.name}`}>
                View Details
              </button>
            </div>
          </div>
        </div>
      ))}
      
      <!-- Hidden plans for Load More functionality -->
      {plans.slice(maxPlans).map((plan, index) => (
        <div class="plan-card hidden bg-white rounded-lg shadow-sm border border-gray-200 hover:shadow-lg transition-all duration-300 overflow-hidden relative" data-hidden-plan="true">
          <!-- Badges -->
          {bestValuePlan && plan.id === bestValuePlan.id && (
            <div class="absolute top-3 right-3 z-10">
              <div class="bg-green-500 text-white px-2 py-1 rounded-full text-xs font-semibold">
                Best Value
              </div>
            </div>
          )}
          {mostPopularPlan && plan.id === mostPopularPlan.id && plan.id !== bestValuePlan?.id && (
            <div class="absolute top-3 right-3 z-10">
              <div class="bg-purple-500 text-white px-2 py-1 rounded-full text-xs font-semibold">
                Most Popular
              </div>
            </div>
          )}
          
          <!-- Plan Header -->
          <div class="p-6 border-b border-gray-100">
            <div class="flex items-start justify-between mb-4">
              <div class="flex-1 pr-4">
                <h3 class="text-lg font-bold text-gray-900 mb-1">{plan.name}</h3>
                <div class="flex items-center gap-2">
                  <ProviderLogo 
                    provider={plan.provider.name}
                    logo={plan.provider.logo}
                    size="sm"
                  />
                  <p class="text-gray-600 text-sm">{plan.provider.name}</p>
                </div>
              </div>
              <div class="text-right">
                <div class="text-2xl font-bold text-blue-600">
                  {plan.pricing.rate1000kWh.toFixed(1)}Â¢
                </div>
                <div class="text-xs text-gray-500">per kWh</div>
              </div>
            </div>

            <!-- Contract Info -->
            <div class="flex items-center gap-4 text-sm text-gray-600">
              <span class="bg-gray-100 px-2 py-1 rounded">
                {plan.contract.length}-month {plan.contract.type}
              </span>
              {plan.features.greenEnergy > 0 && (
                <span class="bg-green-100 text-green-700 px-2 py-1 rounded flex items-center gap-1">
                  <span>ðŸŒ±</span> {plan.features.greenEnergy}% green
                </span>
              )}
            </div>
          </div>

          <!-- Plan Details -->
          <div class="p-6">
            <div class="space-y-3 mb-6">
              <div class="flex justify-between">
                <span class="text-gray-600">Monthly cost (1000 kWh):</span>
                <span class="font-semibold">${plan.pricing.total1000kWh ? plan.pricing.total1000kWh.toFixed(0) : (plan.pricing.rate1000kWh * 10).toFixed(0)}</span>
              </div>
              
              {plan.contract.earlyTerminationFee && plan.contract.earlyTerminationFee > 0 && (
                <div class="flex justify-between">
                  <span class="text-gray-600">Early termination fee:</span>
                  <span class="font-semibold">${plan.contract.earlyTerminationFee}</span>
                </div>
              )}

              {plan.features.deposit && (
                <div class="flex justify-between">
                  <span class="text-gray-600">Deposit required:</span>
                  <span class="font-semibold">
                    {plan.features.deposit.required 
                      ? `$${plan.features.deposit.amount || 'Varies'}`
                      : 'No deposit'
                    }
                  </span>
                </div>
              )}
            </div>

            <!-- Action Buttons -->
            <div class="space-y-3">
              <button class="w-full bg-red-600 hover:bg-red-700 text-white py-3 px-4 rounded-lg font-semibold transition-colors" aria-label={`Enroll now in ${plan.name} plan from ${plan.provider.name}`}>
                Enroll Now
              </button>
              <button class="w-full border border-gray-300 hover:border-gray-400 text-gray-700 py-2 px-4 rounded-lg font-medium transition-colors" aria-label={`View details for ${plan.name} plan from ${plan.provider.name}`}>
                View Details
              </button>
            </div>
          </div>
        </div>
      ))}
    </div>

    <!-- Load More Section -->
    {showLoadMore && remainingPlans > 0 && (
      <div class="text-center mt-12">
        <button id="load-more-btn" 
                class="bg-blue-600 hover:bg-blue-700 text-white px-8 py-3 rounded-lg font-semibold transition-colors"
                data-remaining="{remainingPlans}"
                aria-label={`Show ${remainingPlans} more electricity plans for ${cityName}`}>
          Show {remainingPlans} More Plans
        </button>
        <p class="text-gray-600 text-sm mt-2">
          All plans updated daily with current market rates
        </p>
      </div>
    )}
  )}

  <!-- Plans Summary -->
  {plans.length > 0 && (
    <div class="plans-summary mt-12 bg-blue-50 border border-blue-200 rounded-lg p-6">
      <h3 class="text-lg font-semibold text-blue-900 mb-2">
        ðŸ“Š Market Summary for {cityName}
      </h3>
      <div class="grid md:grid-cols-3 gap-4 text-sm">
        <div>
          <div class="text-blue-800 font-semibold">
            {Math.min(...plans.map(p => p.pricing.rate1000kWh)).toFixed(1)}Â¢
          </div>
          <div class="text-blue-700">Lowest rate</div>
        </div>
        <div>
          <div class="text-blue-800 font-semibold">
            {(plans.reduce((sum, p) => sum + p.pricing.rate1000kWh, 0) / plans.length).toFixed(1)}Â¢
          </div>
          <div class="text-blue-700">Average rate</div>
        </div>
        <div>
          <div class="text-blue-800 font-semibold">
            {plans.filter(p => p.features.greenEnergy === 100).length}
          </div>
          <div class="text-blue-700">100% green plans</div>
        </div>
      </div>
    </div>
  )}
</div>

<style>
  .plan-card:hover {
    transform: translateY(-2px);
  }
  
  .no-plans {
    animation: pulse 2s infinite;
  }
  
  @keyframes pulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.8; }
  }
</style>

<script>
  // Load More functionality
  document.addEventListener('DOMContentLoaded', function() {
    const loadMoreBtn = document.getElementById('load-more-btn');
    const hiddenPlans = document.querySelectorAll('[data-hidden-plan="true"]');
    
    if (!loadMoreBtn || hiddenPlans.length === 0) return;
    
    const plansPerLoad = 6; // Show 6 more plans each time
    let currentlyShown = 0;
    
    loadMoreBtn.addEventListener('click', function() {
      // Show next batch of hidden plans
      const toShow = Array.from(hiddenPlans).slice(currentlyShown, currentlyShown + plansPerLoad);
      
      toShow.forEach(plan => {
        plan.classList.remove('hidden');
        plan.classList.add('animate-fade-in');
      });
      
      currentlyShown += plansPerLoad;
      
      // Update button text and hide if no more plans
      const remaining = hiddenPlans.length - currentlyShown;
      if (remaining > 0) {
        loadMoreBtn.textContent = `Show ${remaining} More Plans`;
      } else {
        loadMoreBtn.style.display = 'none';
      }
    });
  });
</script>

<style>
  @keyframes fade-in {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  .animate-fade-in {
    animation: fade-in 0.5s ease-out;
  }
</style>