---
// Live electricity plans grid component
import { EnterprisePlanCard } from './ui/EnterprisePlanCard';
import { Button } from './ui/button';
import { Badge } from './ui/badge';

interface Plan {
  id: string;
  name: string;
  provider: string | {
    name: string;
    rating?: number;
    reviewCount?: number;
  };
  rate: number;
  contractTerm: string;
  planType: 'fixed' | 'variable' | 'indexed';
  greenEnergy: boolean;
  noDeposit?: boolean;
  topRated?: boolean;
  features: string[];
  slug: string;
  // Support legacy structure
  pricing?: {
    rate1000kWh: number;
    ratePerKwh: number;
  };
  contract?: {
    length: number;
    type: string;
    earlyTerminationFee?: number;
  };
  features?: {
    greenEnergy: number;
    deposit?: {
      required: boolean;
      amount?: number;
    };
  };
}

interface Props {
  plans: Plan[];
  cityName: string;
  showLoadMore?: boolean;
  maxPlans?: number;
}

const { plans, cityName, showLoadMore = true, maxPlans = 12 } = Astro.props;

// Convert legacy plans to EnterprisePlanCard format
const convertedPlans = plans.map((plan, index) => {
  // Handle legacy structure
  const providerName = typeof plan.provider === 'string' ? plan.provider : plan.provider?.name || 'Unknown Provider';
  const rate = plan.rate || plan.pricing?.rate1000kWh || 0;
  const contractLength = plan.contract?.length || 12;
  const contractType = plan.contract?.type || 'fixed';
  const greenEnergyPercent = plan.features?.greenEnergy || 0;
  const isNoDeposit = plan.noDeposit || (plan.features?.deposit && !plan.features.deposit.required) || false;
  
  return {
    id: plan.id || `plan-${index}`,
    name: plan.name,
    provider: providerName,
    rate: rate,
    contractTerm: plan.contractTerm || `${contractLength} months`,
    planType: (plan.planType || contractType) as 'fixed' | 'variable' | 'indexed',
    greenEnergy: plan.greenEnergy || greenEnergyPercent > 0,
    noDeposit: isNoDeposit,
    topRated: plan.topRated || false,
    features: plan.features || [],
    slug: plan.slug || plan.name.toLowerCase().replace(/\s+/g, '-').replace(/[^a-z0-9-]/g, '')
  };
});

const displayedPlans = convertedPlans.slice(0, maxPlans);
const remainingPlans = Math.max(0, convertedPlans.length - maxPlans);

// Identify standout plans (using converted data)
const bestValuePlan = convertedPlans.length > 0 ? convertedPlans.reduce((prev, current) => 
  prev.rate < current.rate ? prev : current
) : null;

const mostPopularPlan = convertedPlans.length > 0 ? convertedPlans.find(plan => 
  plan.contractTerm.includes('12') && 
  plan.planType === 'fixed' &&
  plan.greenEnergy
) || convertedPlans[Math.floor(convertedPlans.length * 0.2)] : null;

---

<div class="live-plan-grid">
  {plans.length === 0 ? (
    <!-- No Plans Available -->
    <div class="no-plans bg-gray-50 border-2 border-dashed border-gray-300 rounded-lg p-12 text-center">
      <div class="text-6xl mb-4">âš¡</div>
      <h3 class="text-2xl font-bold text-gray-900 mb-2">Plans Loading...</h3>
      <p class="text-gray-600 max-w-md mx-auto">
        We're fetching the latest electricity plans and rates for {cityName}. 
        This usually takes just a moment.
      </p>
    </div>
  ) : (
    <!-- Plans Grid -->
    <div class="plans-header mb-8">
      <h2 class="text-3xl font-bold text-gray-900 mb-2">
        {convertedPlans.length} Live Electricity Plans
      </h2>
      <p class="text-gray-600">
        Updated in real-time â€¢ All fees included â€¢ Ready to enroll today
      </p>
    </div>

    <div id="plans-grid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
      {displayedPlans.map((plan) => (
        <EnterprisePlanCard 
          plan={plan}
          client:load
          className="h-full"
        />
      ))}
    </div>

    <!-- Hidden plans for Load More functionality -->
    {convertedPlans.slice(maxPlans).length > 0 && (
      <div id="hidden-plans" class="hidden">
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
          {convertedPlans.slice(maxPlans).map((plan) => (
            <EnterprisePlanCard 
              plan={plan}
              client:load
              className="h-full hidden-plan"
            />
          ))}
        </div>
      </div>
    )}

    <!-- Load More Section -->
    {showLoadMore && remainingPlans > 0 && (
      <div class="text-center mt-12">
        <Button 
          id="load-more-btn"
          variant="texas-primary"
          size="lg"
          data-remaining={remainingPlans}
          aria-label={`Show ${remainingPlans} more electricity plans for ${cityName}`}>
          Show {remainingPlans} More Plans
        </Button>
        <p class="text-gray-600 text-sm mt-2">
          All plans updated daily with current market rates
        </p>
      </div>
    )}
  )}

  <!-- Plans Summary -->
  {convertedPlans.length > 0 && (
    <div class="plans-summary mt-12 bg-texas-cream-200 border border-blue-200 rounded-lg p-6">
      <h3 class="text-lg font-semibold text-blue-900 mb-2">
        ðŸ“Š Market Summary for {cityName}
      </h3>
      <div class="grid md:grid-cols-3 gap-4 text-sm">
        <div>
          <div class="text-texas-navy font-semibold">
            {Math.min(...convertedPlans.map(p => p.rate)).toFixed(1)}Â¢
          </div>
          <div class="text-texas-navy">Lowest rate</div>
        </div>
        <div>
          <div class="text-texas-navy font-semibold">
            {(convertedPlans.reduce((sum, p) => sum + p.rate, 0) / convertedPlans.length).toFixed(1)}Â¢
          </div>
          <div class="text-texas-navy">Average rate</div>
        </div>
        <div>
          <div class="text-texas-navy font-semibold">
            {convertedPlans.filter(p => p.greenEnergy).length}
          </div>
          <div class="text-texas-navy">Green energy plans</div>
        </div>
      </div>
    </div>
  )}
</div>

<style>
  .plan-card:hover {
    transform: translateY(-2px);
  }
  
  .no-plans {
    animation: pulse 2s infinite;
  }
  
  @keyframes pulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.8; }
  }
</style>

<script>
  // Load More functionality
  document.addEventListener('DOMContentLoaded', function() {
    const loadMoreBtn = document.getElementById('load-more-btn');
    const hiddenPlansContainer = document.getElementById('hidden-plans');
    
    if (!loadMoreBtn || !hiddenPlansContainer) return;
    
    const hiddenPlans = hiddenPlansContainer.querySelectorAll('.hidden-plan');
    const plansPerLoad = 6; // Show 6 more plans each time
    let currentlyShown = 0;
    
    loadMoreBtn.addEventListener('click', function() {
      // Show next batch of hidden plans
      const toShow = Array.from(hiddenPlans).slice(currentlyShown, currentlyShown + plansPerLoad);
      
      // Move plans to main grid
      const mainGrid = document.getElementById('plans-grid');
      toShow.forEach(planCard => {
        planCard.classList.remove('hidden-plan');
        planCard.classList.add('animate-fade-in');
        mainGrid.appendChild(planCard);
      });
      
      // Show the hidden container if it was hidden
      if (hiddenPlansContainer.classList.contains('hidden')) {
        hiddenPlansContainer.classList.remove('hidden');
      }
      
      currentlyShown += plansPerLoad;
      
      // Update button text and hide if no more plans
      const remaining = hiddenPlans.length - currentlyShown;
      if (remaining > 0) {
        loadMoreBtn.textContent = `Show ${remaining} More Plans`;
      } else {
        loadMoreBtn.style.display = 'none';
      }
    });
  });
</script>

<style>
  @keyframes fade-in {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  .animate-fade-in {
    animation: fade-in 0.5s ease-out;
  }
</style>