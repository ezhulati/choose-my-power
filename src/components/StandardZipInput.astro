---
/**
 * Standard ZIP Input Component
 * 
 * Reusable component that matches the exact functionality and styling of the homepage ZIP input.
 * Uses the same /api/zip-lookup endpoint and /js/zip-lookup.js script for consistency.
 * 
 * Props:
 * - size: 'sm' | 'md' | 'lg' (default: 'md')
 * - variant: 'hero' | 'inline' | 'compact' (default: 'inline') 
 * - showTitle: boolean (default: false)
 * - showDescription: boolean (default: false)
 * - showStats: boolean (default: false)
 * - customClass: string (additional CSS classes)
 */

import { DEFAULT_COUNTS } from '../lib/utils/dynamic-counts';

export interface Props {
  size?: 'sm' | 'md' | 'lg';
  variant?: 'hero' | 'inline' | 'compact';
  showTitle?: boolean;
  showDescription?: boolean; 
  showStats?: boolean;
  customClass?: string;
}

const { 
  size = 'md',
  variant = 'inline',
  showTitle = false,
  showDescription = false,
  showStats = false,
  customClass = ''
} = Astro.props;

// Size configurations
const sizes = {
  sm: {
    input: 'pl-10 pr-4 py-3 text-base',
    button: 'px-6 py-3',
    icon: 'h-5 w-5'
  },
  md: {
    input: 'pl-14 pr-6 py-5 text-xl',
    button: 'px-10 py-5',
    icon: 'h-6 w-6'
  },
  lg: {
    input: 'pl-16 pr-8 py-6 text-2xl',
    button: 'px-12 py-6',
    icon: 'h-7 w-7'
  }
};

// Variant configurations
const variants = {
  hero: {
    container: 'max-w-xl mx-auto',
    form: 'rounded-2xl shadow-2xl overflow-hidden bg-white ring-4 ring-white/10 backdrop-blur-sm',
    background: 'transparent'
  },
  inline: {
    container: 'w-full max-w-md',
    form: 'rounded-lg shadow-lg overflow-hidden bg-white border border-gray-200',
    background: 'bg-gray-50'
  },
  compact: {
    container: 'w-full max-w-sm',
    form: 'rounded-md shadow overflow-hidden bg-white border border-gray-300',
    background: 'bg-gray-100'
  }
};

const sizeConfig = sizes[size];
const variantConfig = variants[variant];

// Generate unique IDs to prevent conflicts when multiple components exist on the same page
const uniqueId = Math.random().toString(36).substr(2, 9);
const formId = `zipForm-${uniqueId}`;
const inputId = `zipInput-${uniqueId}`;

// Using imported DEFAULT_COUNTS from dynamic-counts system
---

<div class={`${variantConfig.container} ${customClass}`}>
  {showTitle && (
    <div class="mb-6 text-center">
      <h2 class={`text-xl font-semibold mb-2 ${variant === 'hero' ? 'text-white' : 'text-texas-navy'}`}>Find Plans in Your Area</h2>
      {showDescription && (
        <p class={`text-sm ${variant === 'hero' ? 'text-blue-200' : 'text-gray-600'}`}>Enter your ZIP code to see available electricity plans and rates</p>
      )}
    </div>
  )}
  
  <form id={formId} class="zip-form relative">
    <div class={`flex ${variantConfig.form}`}>
      <div class="flex-1 relative">
        <div class="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
          <svg class={`${sizeConfig.icon} text-gray-400`} fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
          </svg>
        </div>
        <input
          type="text"
          id={inputId}
          name="zip"
          maxlength="5"
          placeholder="ZIP code"
          class={`zip-input w-full ${sizeConfig.input} text-gray-900 placeholder-gray-500 border-0 focus:ring-0 focus:outline-none font-medium tracking-wider`}
          autocomplete="postal-code"
          inputmode="numeric"
          required
        />
      </div>
      <button
        type="submit"
        aria-label="Search electricity plans by ZIP code"
        class={`${sizeConfig.button} bg-gradient-to-r from-texas-red to-texas-red-700 text-white font-bold hover:from-texas-red-600 hover:to-texas-red-800 transition-all duration-300 focus:outline-none focus:ring-4 focus:ring-texas-red-200 active:scale-95 group`}
      >
        <div class="flex items-center gap-3">
          <svg class={`${sizeConfig.icon} group-hover:scale-110 transition-transform`} fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
          </svg>
          {size !== 'sm' && <span class="hidden sm:block">Find Plans</span>}
        </div>
      </button>
    </div>
  </form>
  
  {showStats && (
    <div class="mt-6 grid grid-cols-3 gap-4 text-center">
      <div class={`rounded-lg p-4 border ${variant === 'hero' ? 'bg-white/10 backdrop-blur-sm border-white/20' : 'bg-white border-gray-200 shadow-sm'}`}>
        <div class={`text-xl font-bold ${variant === 'hero' ? 'text-white' : 'text-texas-navy'}`}>{DEFAULT_COUNTS.cities}</div>
        <div class={`text-xs ${variant === 'hero' ? 'text-blue-200' : 'text-gray-600'}`}>Texas Cities</div>
      </div>
      <div class={`rounded-lg p-4 border ${variant === 'hero' ? 'bg-white/10 backdrop-blur-sm border-white/20' : 'bg-white border-gray-200 shadow-sm'}`}>
        <div class={`text-xl font-bold ${variant === 'hero' ? 'text-white' : 'text-texas-navy'}`}>{DEFAULT_COUNTS.providers}</div>
        <div class={`text-xs ${variant === 'hero' ? 'text-blue-200' : 'text-gray-600'}`}>Providers</div>
      </div>
      <div class={`rounded-lg p-4 border ${variant === 'hero' ? 'bg-white/10 backdrop-blur-sm border-white/20' : 'bg-white border-gray-200 shadow-sm'}`}>
        <div class={`text-xl font-bold ${variant === 'hero' ? 'text-white' : 'text-texas-navy'}`}>{DEFAULT_COUNTS.plans}</div>
        <div class={`text-xs ${variant === 'hero' ? 'text-blue-200' : 'text-gray-600'}`}>Plans</div>
      </div>
    </div>
  )}
</div>

<!-- Inline ZIP lookup functionality for client-side navigation -->
<script>
  document.addEventListener('DOMContentLoaded', function() {
    // ZIP to city mapping (key mappings for Texas)
    const zipToCity = {
      // Dallas area ZIP codes
      '75001': 'addison', '75201': 'dallas', '75202': 'dallas', '75203': 'dallas',
      '75204': 'dallas', '75205': 'dallas', '75206': 'dallas', '75207': 'dallas',
      '75208': 'dallas', '75209': 'dallas', '75210': 'dallas', '75211': 'dallas',
      '75212': 'dallas', '75214': 'dallas', '75215': 'dallas', '75216': 'dallas',
      '75217': 'dallas', '75218': 'dallas', '75219': 'dallas', '75220': 'dallas',
      '75221': 'dallas', '75222': 'dallas', '75223': 'dallas', '75224': 'dallas',
      '75225': 'dallas', '75226': 'dallas', '75227': 'dallas', '75228': 'dallas',
      '75229': 'dallas', '75230': 'dallas', '75231': 'dallas', '75232': 'dallas',
      '75233': 'dallas', '75234': 'dallas', '75235': 'dallas', '75236': 'dallas',
      '75237': 'dallas', '75238': 'dallas', '75240': 'dallas', '75241': 'dallas',
      '75242': 'dallas', '75243': 'dallas', '75244': 'dallas', '75246': 'dallas',
      '75247': 'dallas', '75248': 'dallas', '75249': 'dallas', '75250': 'dallas',
      // Houston area ZIP codes  
      '77001': 'houston', '77002': 'houston', '77003': 'houston', '77004': 'houston',
      '77005': 'houston', '77006': 'houston', '77007': 'houston', '77008': 'houston',
      '77009': 'houston', '77010': 'houston', '77011': 'houston', '77012': 'houston',
      '77013': 'houston', '77014': 'houston', '77015': 'houston', '77016': 'houston',
      '77017': 'houston', '77018': 'houston', '77019': 'houston', '77020': 'houston',
      '77021': 'houston', '77022': 'houston', '77023': 'houston', '77024': 'houston',
      '77025': 'houston', '77026': 'houston', '77027': 'houston', '77028': 'houston',
      // Austin area ZIP codes
      '78701': 'austin', '78702': 'austin', '78703': 'austin', '78704': 'austin',
      '78705': 'austin', '78712': 'austin', '78717': 'austin', '78719': 'austin',
      '78721': 'austin', '78722': 'austin', '78723': 'austin', '78724': 'austin',
      '78725': 'austin', '78726': 'austin', '78727': 'austin', '78728': 'austin',
      '78729': 'austin', '78730': 'austin', '78731': 'austin', '78732': 'austin',
      // San Antonio area ZIP codes
      '78201': 'san-antonio', '78202': 'san-antonio', '78203': 'san-antonio', '78204': 'san-antonio',
      '78205': 'san-antonio', '78207': 'san-antonio', '78208': 'san-antonio', '78209': 'san-antonio',
      '78210': 'san-antonio', '78211': 'san-antonio', '78212': 'san-antonio', '78213': 'san-antonio',
      '78214': 'san-antonio', '78215': 'san-antonio', '78216': 'san-antonio', '78217': 'san-antonio',
      // Fort Worth area ZIP codes
      '76101': 'fort-worth', '76102': 'fort-worth', '76103': 'fort-worth', '76104': 'fort-worth',
      '76105': 'fort-worth', '76106': 'fort-worth', '76107': 'fort-worth', '76108': 'fort-worth',
      '76109': 'fort-worth', '76110': 'fort-worth', '76111': 'fort-worth', '76112': 'fort-worth',
      // Plano ZIP codes
      '75023': 'plano', '75024': 'plano', '75025': 'plano', '75074': 'plano',
      '75075': 'plano', '75086': 'plano', '75093': 'plano', '75094': 'plano'
    };

    function getCityFromZip(zipCode) {
      return zipToCity[zipCode] || null;
    }

    // Find all ZIP forms on the page
    const zipForms = document.querySelectorAll('.zip-form');
    
    zipForms.forEach(form => {
      form.addEventListener('submit', function(e) {
        e.preventDefault();
        
        // Find the ZIP input within this specific form
        const zipInput = form.querySelector('.zip-input');
        const zipCode = zipInput ? zipInput.value.trim() : '';
        
        if (zipCode && zipCode.length === 5) {
          const city = getCityFromZip(zipCode);
          
          if (city) {
            // Direct navigation to city page
            window.location.href = `/texas/${city}`;
          } else {
            // Fallback logic
            if (zipCode.startsWith('7')) {
              // Texas ZIP code, but city not in our mapping - go to Texas page
              window.location.href = '/texas/electricity-providers';
            } else {
              // Not a Texas ZIP code or unknown - go to locations page
              window.location.href = '/locations';
            }
          }
        }
      });
    });
  });
</script>

<style>
  /* Ensure consistent focus states */
  .zip-input:focus {
    outline: none;
    box-shadow: 0 0 0 3px rgba(220, 38, 38, 0.1);
  }
  
  /* Button hover enhancements */
  button[type="submit"]:hover svg {
    transform: scale(1.1);
  }
  
  /* Mobile optimization */
  @media (max-width: 640px) {
    .hidden.sm\\:block {
      display: none;
    }
  }
</style>