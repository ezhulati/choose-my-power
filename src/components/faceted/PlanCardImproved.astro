---
/**
 * Improved PlanCard Component with shadcn/ui components
 * Server-rendered electricity plan card with consistent design system
 * Uses shadcn/ui components for better consistency and professional appearance
 */

import type { Plan } from '../../types/facets';
import { Badge } from '../ui/badge';
import { Button } from '../ui/button';
import { Card, CardHeader, CardContent, CardFooter } from '../ui/card';
import { Separator } from '../ui/separator';
import { Alert, AlertDescription } from '../ui/alert';

interface Props {
  plan: Plan;
  city: string;
  position: number;
  showComparison?: boolean;
}

const { plan, city, position, showComparison = false } = Astro.props;

// Format pricing for display
const formatRate = (rate: number) => (rate * 100).toFixed(1);
const formatCurrency = (amount: number) => `$${amount.toFixed(0)}`;

// Calculate estimated monthly bills (converting from rate to actual bill)
const monthlyBill500 = plan.pricing.rate500kWh * 500;
const monthlyBill1000 = plan.pricing.rate1000kWh * 1000;
const monthlyBill2000 = plan.pricing.rate2000kWh * 2000;

// Generate enrollment tracking URL
const enrollmentUrl = `/enroll/${plan.id}?city=${city}&position=${position}`;

// Trust signals
const hasRating = plan.provider.rating > 0;
const hasGuarantee = plan.contract.satisfactionGuarantee;
const isGreen = plan.features.greenEnergy > 0;
const noDeposit = !plan.features.deposit.required;
const isGoodDeal = plan.pricing.rate1000kWh < 0.12; // Below average rate

// Contract highlights
const contractHighlights = [];
if (plan.contract.length <= 12) contractHighlights.push(`${plan.contract.length}-month`);
if (plan.contract.type === 'fixed') contractHighlights.push('Fixed rate');
if (isGreen) contractHighlights.push(`${plan.features.greenEnergy}% green`);
if (noDeposit) contractHighlights.push('No deposit');
if (hasGuarantee) contractHighlights.push('Satisfaction guarantee');
---

<div className="group bg-white rounded-xl shadow-lg border border-gray-100 hover:shadow-2xl hover:border-texas-navy/20 transition-all duration-300 overflow-hidden relative" data-plan-id={plan.id}>
  
  {/* Special Badges */}
  <div className="absolute top-4 right-4 z-10 flex flex-col gap-2">
    {position <= 3 && (
      <span className="px-3 py-1 bg-green-100 text-green-800 text-xs font-bold rounded-full flex items-center gap-1">
        <span>üèÜ</span>
        <span>#{position}</span>
      </span>
    )}
    {isGreen && plan.features.greenEnergy === 100 && (
      <span className="px-3 py-1 bg-green-100 text-green-800 text-xs font-bold rounded-full flex items-center gap-1">
        <Leaf className="h-3 w-3" />
        <span>100% Green</span>
      </span>
    )}
  </div>

  {/* Card Header */}
  <div className="p-6 pb-4">
    <div className="flex items-start justify-between mb-4">
      <div className="flex items-center gap-4">
        <img
          src={plan.provider.logo}
          alt={`${plan.provider.name} logo`}
          className="w-12 h-12 rounded-xl object-cover border border-gray-200"
        />
        <div>
          <h3 className="text-xl font-bold text-gray-900 group-hover:text-texas-navy transition-colors">
            {plan.name}
          </h3>
          <p className="text-gray-600 font-medium">{plan.provider.name}</p>
        </div>
      </div>
    </div>

    {/* Essential Info Grid */}
    <div className="grid grid-cols-2 gap-4 mb-6">
      <div className="text-center p-3 bg-texas-cream-50 rounded-lg">
        <div className="text-2xl font-bold text-texas-navy">{formatRate(plan.pricing.rate1000kWh)}¬¢</div>
        <div className="text-sm text-gray-600">per kWh</div>
      </div>
      <div className="text-center p-3 bg-gray-50 rounded-lg">
        <div className="text-2xl font-bold text-gray-900">{plan.contract.length}</div>
        <div className="text-sm text-gray-600">months</div>
      </div>
    </div>
  </div>

  {/* Card Footer */}
  <div className="px-6 pb-6">
    <button
      onClick={() => navigate(`/electricity-plans/${plan.provider.name.toLowerCase().replace(/\s+/g, '-')}/${plan.name.toLowerCase().replace(/\s+/g, '-')}`)}
      className="w-full bg-texas-navy text-white py-4 px-6 rounded-xl font-semibold text-lg hover:bg-texas-red transition-all duration-200 group-hover:bg-texas-red transform hover:scale-105"
    >
      View Details
    </button>
  </div>
  
  {/* Hover Effect Overlay */}
  <div className="absolute inset-0 bg-gradient-to-t from-texas-navy/5 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none"></div>
</div>

<!-- Modern analytics tracking script -->
<script>
  // Track plan card interactions and handle comparison functionality
  document.addEventListener('click', (event) => {
    const target = event.target as HTMLElement;
    
    // Track enrollment clicks
    if (target.classList.contains('enroll-btn') || target.closest('.enroll-btn')) {
      const button = target.closest('[data-plan-id]') as HTMLElement;
      if (button) {
        const planId = button.dataset.planId;
        const provider = button.dataset.provider;
        const rate = button.dataset.rate;
        const position = button.dataset.position;
        
        if (typeof gtag !== 'undefined') {
          gtag('event', 'plan_click', {
            plan_id: planId,
            provider: provider,
            rate: rate,
            position: parseInt(position || '0'),
            page_url: window.location.pathname,
          });
        }
      }
    }
    
    // Handle comparison clicks
    if (target.classList.contains('compare-btn') || target.closest('.compare-btn')) {
      const button = target.closest('.compare-btn') as HTMLButtonElement;
      if (button) {
        const planId = button.dataset.planId;
        
        // Find the plan data from the card
        const planCard = button.closest('.plan-card-improved') as HTMLElement;
        const planData = planCard ? extractPlanDataFromCard(planCard) : null;
        
        if (planData) {
          const isCurrentlyInComparison = button.textContent?.includes('Remove');
          const action = isCurrentlyInComparison ? 'remove' : 'add';
          
          // Dispatch comparison event
          window.dispatchEvent(new CustomEvent('compare-toggle', {
            detail: { plan: planData, action }
          }));
          
          // Update button text
          const buttonText = button.querySelector('span');
          if (buttonText) {
            buttonText.innerHTML = isCurrentlyInComparison 
              ? '<span class="mr-2">üìä</span>Compare'
              : '<span class="mr-2">üìä</span>Remove';
          }
        }
        
        if (typeof gtag !== 'undefined') {
          gtag('event', 'compare_click', {
            plan_id: planId,
            page_url: window.location.pathname,
          });
        }
      }
    }
  });

  // Listen for comparison updates from the comparison bar
  window.addEventListener('comparison-updated', (event: CustomEvent) => {
    const { planId, inComparison } = event.detail;
    const button = document.querySelector(`[data-plan-id="${planId}"].compare-btn`) as HTMLButtonElement;
    
    if (button) {
      const buttonText = button.querySelector('span');
      if (buttonText) {
        buttonText.innerHTML = inComparison 
          ? '<span class="mr-2">üìä</span>Remove'
          : '<span class="mr-2">üìä</span>Compare';
      }
    }
  });

  // Helper function to extract plan data from card DOM
  function extractPlanDataFromCard(planCard: HTMLElement) {
    const planId = planCard.dataset.planId;
    if (!planId) return null;

    // Extract basic info from data attributes and DOM content
    const providerName = planCard.querySelector('.provider-name-mobile')?.textContent?.trim() || '';
    const planName = planCard.querySelector('.plan-name-mobile')?.textContent?.trim() || '';
    const rateText = planCard.querySelector('.rate-value')?.textContent?.trim() || '0¬¢';
    const rate = parseFloat(rateText.replace('¬¢', '')) / 100;

    return {
      id: planId,
      name: planName,
      provider: {
        name: providerName,
        logo: '',
        rating: 0,
        reviewCount: 0
      },
      pricing: {
        rate500kWh: rate * 0.95, // Approximate
        rate1000kWh: rate,
        rate2000kWh: rate * 0.98, // Approximate
        ratePerKwh: rate
      },
      contract: {
        length: 12, // Default
        type: 'fixed' as const,
        earlyTerminationFee: 0,
        autoRenewal: false,
        satisfactionGuarantee: false
      },
      features: {
        greenEnergy: 0,
        billCredit: 0,
        deposit: {
          required: false,
          amount: 0
        }
      },
      availability: {
        enrollmentType: 'both' as const,
        serviceAreas: []
      }
    };
  }
</script>

<style>
  /* Additional styles for improved component */
  .plan-card-improved {
    /* Ensure badges have proper z-index and don't interfere with content */
    min-height: 400px;
    padding-top: 1rem; /* Space for top badges */
  }
  
  /* Smooth hover animations */
  .plan-card-improved:hover {
    transform: translateY(-4px);
    box-shadow: 0 12px 40px rgba(0, 39, 104, 0.12), 0 4px 16px rgba(0, 39, 104, 0.08);
  }

  /* Badge positioning improvements */
  .plan-card-improved .absolute {
    z-index: 10;
  }

  /* Typography improvements */
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  /* Mobile responsiveness */
  @media (max-width: 640px) {
    .plan-card-improved {
      margin: 0.5rem;
      min-height: auto;
    }

    .grid.grid-cols-3 {
      grid-template-columns: 1fr;
      gap: 0.75rem;
    }

    .grid.grid-cols-2 {
      grid-template-columns: 1fr;
      gap: 0.75rem;
    }

    .flex.gap-3 {
      flex-direction: column;
      gap: 0.75rem;
    }

    .text-4xl {
      font-size: 2.5rem;
    }
  }
</style>