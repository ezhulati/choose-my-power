---
/**
 * PlanCard Component
 * Server-rendered electricity plan card for faceted navigation pages
 * Displays plan details with trust signals and conversion-focused CTAs
 * Updated to use shadcn/ui components with proper vertical stacking
 */

import type { Plan } from '../../types/facets';
import { Badge } from '../ui/badge';
import { Card, CardContent, CardFooter, CardHeader } from '../ui/card';
import { Button } from '../ui/button';
import { Separator } from '../ui/separator';

interface Props {
  plan: Plan;
  city: string;
  position: number;
  showComparison?: boolean;
  allPlans?: Plan[];
}

const { plan, city, position, showComparison = false, allPlans = [] } = Astro.props;

// Format pricing for display - rate comes in as cents per kWh (8.9 = 8.9¢)
const formatRate = (rate: number) => rate.toFixed(1);
const formatCurrency = (amount: number) => `$${amount.toFixed(0)}`;

// Calculate estimated monthly bills - rate is in cents per kWh, convert to dollars
const monthlyBill500 = (plan.pricing.rate500kWh * 500) / 100; // cents/kWh * kWh / 100 = dollars
const monthlyBill1000 = (plan.pricing.rate1000kWh * 1000) / 100; // cents/kWh * kWh / 100 = dollars  
const monthlyBill2000 = (plan.pricing.rate2000kWh * 2000) / 100; // cents/kWh * kWh / 100 = dollars

// Generate enrollment tracking URL
const enrollmentUrl = `/enroll/${plan.id}?city=${city}&position=${position}`;

// Trust signals
const hasRating = plan.provider.rating > 0;
const hasGuarantee = plan.contract.satisfactionGuarantee;
const isGreen = plan.features.greenEnergy > 0;
const noDeposit = !plan.features.deposit.required;

// Import smart badging system
import { badgingSystem, type BadgingContext } from '../../lib/badges/badging-system';

// Generate smart badges using the proper system
const badgingContext: BadgingContext = {
  allPlans: allPlans, // Now properly passed from parent component
  planPosition: position,
  cityTier: 2 // Default tier, should be passed from city data
};

const smartBadges = badgingSystem.generateBadges(plan, badgingContext);
---

<Card variant="plan-card" className="plan-card-hover" data-plan-id={plan.id}>
  <CardHeader className="space-y-4">
    <!-- Provider Info - Vertically Stacked -->
    <div class="provider-info space-y-3">
      <div class="flex items-center gap-3">
        {plan.provider.logo && (
          <img 
            src={plan.provider.logo} 
            alt={`${plan.provider.name} logo`}
            class="provider-logo w-16 h-8 object-contain"
            width="64"
            height="32"
            loading="eager"
          />
        )}
        <div class="provider-details">
          <h3 class="plan-name text-xl font-semibold text-gray-900 mb-1">{plan.name}</h3>
          <div class="provider-name text-sm text-gray-600">{plan.provider.name}</div>
        </div>
      </div>
      
      {hasRating && (
        <div class="rating flex items-center gap-2">
          <div class="stars text-yellow-400" aria-label={`${plan.provider.rating} out of 5 stars`}>
            {Array.from({length: 5}, (_, i) => (
              <span class={`text-sm ${i < Math.floor(plan.provider.rating) ? 'text-yellow-400' : 'text-gray-300'}`}>★</span>
            ))}
          </div>
          <span class="rating-text text-xs text-gray-600">
            {plan.provider.rating.toFixed(1)} ({plan.provider.reviewCount} reviews)
          </span>
        </div>
      )}
    </div>
    
    <!-- Smart Badges - Only Meaningful Ones -->
    <div class="trust-signals flex flex-wrap gap-2 justify-center">
      {smartBadges.map((badge) => (
        <Badge 
          variant={badge.variant} 
          className={badgingSystem.getBadgeClasses(badge.variant)}
          title={badge.reason}
        >
          {badge.text}
        </Badge>
      ))}
    </div>
  </CardHeader>

  <CardContent className="space-y-6">
    <!-- Rate Display - Clean Without Badges -->
    <div class="rate-display text-center space-y-3">
      <div class="main-rate">
        <div class="text-4xl font-bold text-texas-navy">{formatRate(plan.pricing.rate1000kWh)}¢</div>
        <div class="text-sm text-gray-600">per kWh (1,000 kWh usage)</div>
        <div class="text-sm text-texas-blue capitalize">{plan.contract.type} rate</div>
      </div>
    </div>

    <Separator />

    <!-- Usage Estimates - Vertically Stacked for Mobile -->
    <div class="usage-pricing-container space-y-4">
      <h4 class="text-sm font-medium text-gray-700">Monthly Usage Estimates</h4>
      
      <div class="space-y-3">
        <div class="usage-tier flex justify-between items-center p-3 rounded-lg border border-gray-100">
          <span class="text-sm text-gray-600">500 kWh</span>
          <div class="text-right">
            <div class="font-bold text-texas-navy">{formatCurrency(monthlyBill500)}</div>
            <div class="text-xs text-gray-500">per month</div>
          </div>
        </div>
        
        <div class="usage-tier flex justify-between items-center p-3 rounded-lg border-2 border-texas-navy/20 bg-texas-navy/5">
          <span class="text-sm text-gray-600 font-medium">1000 kWh</span>
          <div class="text-right">
            <div class="font-bold text-texas-navy">{formatCurrency(monthlyBill1000)}</div>
            <div class="text-xs text-gray-500">per month</div>
          </div>
        </div>
        
        <div class="usage-tier flex justify-between items-center p-3 rounded-lg border border-gray-100">
          <span class="text-sm text-gray-600">2000 kWh</span>
          <div class="text-right">
            <div class="font-bold text-texas-navy">{formatCurrency(monthlyBill2000)}</div>
            <div class="text-xs text-gray-500">per month</div>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Price Transparency Alert -->
    <div class="p-3 bg-texas-navy/5 border border-texas-navy/20 rounded-lg">
      <p class="text-xs text-texas-navy flex items-center gap-2 font-medium">
        <span class="text-sm">ℹ️</span>
        Prices include all electricity charges and delivery fees - no hidden costs
      </p>
    </div>

    <Separator />

    <!-- Contract Details - Vertically Stacked -->
    <div class="contract-details space-y-4">
      <h4 class="text-sm font-medium text-gray-900">Contract Details</h4>
      <div class="space-y-3">
        <div class="flex justify-between items-center">
          <span class="text-sm text-gray-600">Contract Length:</span>
          <span class="text-sm font-medium text-gray-900">{plan.contract.length} months</span>
        </div>
        <div class="flex justify-between items-center">
          <span class="text-sm text-gray-600">Cancellation Fee:</span>
          <span class="text-sm font-medium text-gray-900">
            {plan.contract.earlyTerminationFee > 0 
              ? formatCurrency(plan.contract.earlyTerminationFee)
              : 'None'
            }
          </span>
        </div>
        {plan.features.deposit.required && (
          <div class="flex justify-between items-center">
            <span class="text-sm text-gray-600">Deposit:</span>
            <span class="text-sm font-medium text-gray-900">{formatCurrency(plan.features.deposit.amount)}</span>
          </div>
        )}
        {plan.features.billCredit > 0 && (
          <div class="flex justify-between items-center">
            <span class="text-sm text-gray-600">Bill Credit:</span>
            <span class="text-sm font-medium text-gray-900">{formatCurrency(plan.features.billCredit)}</span>
          </div>
        )}
      </div>
    </div>

    <!-- Features & Benefits - Vertically Stacked -->
    {(isGreen || plan.features.freeTime || hasGuarantee || noDeposit) && (
      <>
        <Separator />
        <div class="features-section space-y-4">
          <h4 class="text-sm font-medium text-gray-900">Plan Features</h4>
          <div class="space-y-3">
            {isGreen && (
              <div class="flex items-center gap-2 text-sm text-texas-gold-700">
                <span class="text-texas-gold-600">●</span>
                {plan.features.greenEnergy}% renewable energy
              </div>
            )}
            {plan.features.freeTime && (
              <div class="flex items-center gap-2 text-sm text-gray-700">
                <span class="text-blue-600">●</span>
                Free electricity {plan.features.freeTime.hours} {plan.features.freeTime.days.join(', ')}
              </div>
            )}
            {hasGuarantee && (
              <div class="flex items-center gap-2 text-sm text-gray-700">
                <span class="text-texas-navy">✓</span>
                30-day satisfaction guarantee
              </div>
            )}
            {noDeposit && (
              <div class="flex items-center gap-2 text-sm text-gray-700">
                <span class="text-blue-600">●</span>
                No deposit required
              </div>
            )}
          </div>
        </div>
      </>
    )}
  </CardContent>

  <CardFooter className="flex-col space-y-4">
    <!-- Action Buttons - Single Line Text Only -->
    <div class="action-buttons flex flex-col sm:flex-row gap-3 w-full">
      <a 
        href={enrollmentUrl}
        class="flex-1 inline-flex items-center justify-center bg-red-600 hover:bg-red-700 text-white font-semibold py-3 px-4 rounded-lg transition-all duration-200 enroll-btn shadow-sm whitespace-nowrap text-sm"
        data-plan-id={plan.id}
        data-provider={plan.provider.name}
        data-rate={plan.pricing.rate1000kWh}
        data-position={position}
      >
        Enroll
      </a>
      
      <button 
        class="flex-1 sm:flex-none inline-flex items-center justify-center border-2 border-blue-600 text-blue-600 hover:bg-blue-600 hover:text-white font-medium py-3 px-4 rounded-lg transition-all duration-200 details-btn whitespace-nowrap text-sm"
        data-plan-id={plan.id}
        aria-label={`View ${plan.name} details`}
      >
        Details
      </button>
    </div>
    
    <!-- Enrollment Info - Better Spacing -->
    <div class="enrollment-info w-full">
      <div class="flex items-center justify-between text-xs text-gray-600">
        <span class="enrollment-type">
          {plan.availability.enrollmentType === 'online' ? 'Online enrollment available' : 
           plan.availability.enrollmentType === 'phone' ? 'Call to enroll' : 
           'Online & phone enrollment'}
        </span>
        <Badge variant="texas-accent" className="text-xs whitespace-nowrap">
          ✓ Texas Approved
        </Badge>
      </div>
    </div>

    <!-- Fine Print - Better Typography -->
    <div class="fine-print w-full pt-3 border-t border-gray-100">
      <p class="text-xs text-gray-500 leading-relaxed">
        Rates include energy charges and TDU delivery fees. 
        Prices shown for average monthly usage in {city}. 
        <a href="/terms" class="text-texas-navy hover:text-texas-navy/80 underline">See terms and conditions</a>.
      </p>
    </div>
  </CardFooter>
</Card>

<style>
  /* Hover effect for plan cards */
  .plan-card-hover {
    transition: all 0.3s ease;
  }
  .plan-card-hover:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
  }


  /* Mobile responsiveness for shadcn Card components */
  @media (max-width: 640px) {
    .plan-card-hover {
      margin-bottom: 1rem;
    }
  }
</style>

<!-- Enhanced analytics tracking -->
<script>
  // Track plan card interactions and handle comparison functionality
  document.addEventListener('click', (event) => {
    const target = event.target as HTMLElement;
    
    // Track enrollment clicks
    if (target.classList.contains('enroll-btn')) {
      const planId = target.dataset.planId;
      const provider = target.dataset.provider;
      const rate = target.dataset.rate;
      const position = target.dataset.position;
      
      if (typeof gtag !== 'undefined') {
        gtag('event', 'plan_click', {
          plan_id: planId,
          provider: provider,
          rate: rate,
          position: parseInt(position || '0'),
          page_url: window.location.pathname,
        });
      }
    }
    
    // Handle comparison clicks
    if (target.classList.contains('compare-btn')) {
      const button = target.closest('button') as HTMLButtonElement;
      const planId = button.dataset.planId;
      
      // Find the plan data from the card
      const planCard = button.closest('.plan-card') as HTMLElement;
      const planData = planCard ? extractPlanDataFromCard(planCard) : null;
      
      if (planData) {
        const isCurrentlyInComparison = button.textContent?.includes('Remove');
        const action = isCurrentlyInComparison ? 'remove' : 'add';
        
        // Dispatch comparison event
        window.dispatchEvent(new CustomEvent('compare-toggle', {
          detail: { plan: planData, action }
        }));
        
        // Update button text
        const buttonText = button.querySelector('span');
        if (buttonText) {
          buttonText.innerHTML = isCurrentlyInComparison 
            ? '<span class="mr-1"></span>Compare'
            : '<span class="mr-1"></span>Remove';
        }
      }
      
      if (typeof gtag !== 'undefined') {
        gtag('event', 'compare_click', {
          plan_id: planId,
          page_url: window.location.pathname,
        });
      }
    }
  });

  // Listen for comparison updates from the comparison bar
  window.addEventListener('comparison-updated', (event: CustomEvent) => {
    const { planId, inComparison } = event.detail;
    const button = document.querySelector(`[data-plan-id="${planId}"].compare-btn`) as HTMLButtonElement;
    
    if (button) {
      const buttonText = button.querySelector('span');
      if (buttonText) {
        buttonText.innerHTML = inComparison 
          ? '<span class="mr-1"></span>Remove'
          : '<span class="mr-1"></span>Compare';
      }
    }
  });

  // Helper function to extract plan data from card DOM
  function extractPlanDataFromCard(planCard: HTMLElement) {
    const planId = planCard.dataset.planId;
    if (!planId) return null;

    // Extract basic info from data attributes and DOM content
    const providerName = planCard.querySelector('.provider-name')?.textContent?.trim() || '';
    const planName = planCard.querySelector('.plan-name')?.textContent?.trim() || '';
    const rateText = planCard.querySelector('.rate-value')?.textContent?.trim() || '0¢';
    const rate = parseFloat(rateText.replace('¢', '')) / 100;

    return {
      id: planId,
      name: planName,
      provider: {
        name: providerName,
        logo: '',
        rating: 0,
        reviewCount: 0
      },
      pricing: {
        rate500kWh: rate * 0.95, // Approximate
        rate1000kWh: rate,
        rate2000kWh: rate * 0.98, // Approximate
        ratePerKwh: rate
      },
      contract: {
        length: 12, // Default
        type: 'fixed' as const,
        earlyTerminationFee: 0,
        autoRenewal: false,
        satisfactionGuarantee: false
      },
      features: {
        greenEnergy: 0,
        billCredit: 0,
        deposit: {
          required: false,
          amount: 0
        }
      },
      availability: {
        enrollmentType: 'both' as const,
        serviceAreas: []
      }
    };
  }
</script>