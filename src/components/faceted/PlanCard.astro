---
/**
 * PlanCard Component
 * Server-rendered electricity plan card for faceted navigation pages
 * Displays plan details with trust signals and conversion-focused CTAs
 */

import type { Plan } from '../../types/facets';

interface Props {
  plan: Plan;
  city: string;
  position: number;
  showComparison?: boolean;
}

const { plan, city, position, showComparison = false } = Astro.props;

// Format pricing for display
const formatRate = (rate: number) => (rate * 100).toFixed(1);
const formatCurrency = (amount: number) => `$${amount.toFixed(0)}`;

// Calculate estimated monthly bills (converting from rate to actual bill)
const monthlyBill500 = plan.pricing.rate500kWh * 500;
const monthlyBill1000 = plan.pricing.rate1000kWh * 1000;
const monthlyBill2000 = plan.pricing.rate2000kWh * 2000;

// Generate enrollment tracking URL
const enrollmentUrl = `/enroll/${plan.id}?city=${city}&position=${position}`;

// Trust signals
const hasRating = plan.provider.rating > 0;
const hasGuarantee = plan.contract.satisfactionGuarantee;
const isGreen = plan.features.greenEnergy > 0;
const noDeposit = !plan.features.deposit.required;

// Contract highlights
const contractHighlights = [];
if (plan.contract.length <= 12) contractHighlights.push(`${plan.contract.length}-month`);
if (plan.contract.type === 'fixed') contractHighlights.push('Fixed rate');
if (isGreen) contractHighlights.push(`${plan.features.greenEnergy}% green`);
if (noDeposit) contractHighlights.push('No deposit');
if (hasGuarantee) contractHighlights.push('Satisfaction guarantee');
---

<div class="plan-card plan-card-hover" data-plan-id={plan.id}>
  <!-- Provider Header -->
  <div class="plan-header">
    <div class="provider-info">
      {plan.provider.logo && (
        <img 
          src={plan.provider.logo} 
          alt={`${plan.provider.name} logo`}
          class="provider-logo"
          width="60"
          height="30"
          loading="eager"
        />
      )}
      <div class="provider-details">
        <h3 class="plan-name">{plan.name}</h3>
        <div class="provider-name">{plan.provider.name}</div>
        {hasRating && (
          <div class="rating">
            <div class="stars" aria-label={`${plan.provider.rating} out of 5 stars`}>
              {Array.from({length: 5}, (_, i) => (
                <span class={`star ${i < Math.floor(plan.provider.rating) ? 'filled' : ''}`}>★</span>
              ))}
            </div>
            <span class="rating-text">
              {plan.provider.rating.toFixed(1)} ({plan.provider.reviewCount} reviews)
            </span>
          </div>
        )}
      </div>
    </div>
    
    <!-- Trust Signals -->
    <div class="trust-signals">
      {contractHighlights.slice(0, 2).map(highlight => (
        <span class="trust-badge">{highlight}</span>
      ))}
      {position <= 3 && (
        <span class="trust-badge bg-texas-red text-white border-texas-red">Top Choice</span>
      )}
    </div>
  </div>

  <!-- Pricing Display -->
  <div class="pricing-section">
    <div class="rate-display">
      <div class="main-rate">
        <span class="rate-value text-texas-navy">{formatRate(plan.pricing.rate1000kWh)}¢</span>
        <span class="rate-unit">per kWh</span>
      </div>
      <div class="rate-type text-texas-blue">{plan.contract.type} rate</div>
      {position <= 5 && (
        <div class="best-value-badge">
          <span class="text-xs bg-yellow-100 text-yellow-800 px-2 py-1 rounded-full font-medium">
            💡 Great Value
          </span>
        </div>
      )}
      
      {/* Savings indicator */}
      {plan.pricing.rate1000kWh < 0.12 && (
        <div class="savings-badge">
          <span class="text-xs bg-green-100 text-green-800 px-2 py-1 rounded-full font-medium">
            💰 Below Average Rate
          </span>
        </div>
      )}
    </div>

    <!-- Usage-based pricing with savings indicators -->
    <div class="usage-pricing">
      <div class="usage-tier">
        <span class="usage-amount">500 kWh</span>
        <span class="monthly-bill">{formatCurrency(monthlyBill500)}</span>
        <span class="monthly-label">per month</span>
      </div>
      <div class="usage-tier highlighted">
        <span class="usage-amount">1000 kWh</span>
        <span class="monthly-bill">{formatCurrency(monthlyBill1000)}</span>
        <span class="monthly-label">per month</span>
        <span class="popular">Most Popular</span>
      </div>
      <div class="usage-tier">
        <span class="usage-amount">2000 kWh</span>
        <span class="monthly-bill">{formatCurrency(monthlyBill2000)}</span>
        <span class="monthly-label">per month</span>
      </div>
    </div>
    
    <!-- Price transparency notice -->
    <div class="price-transparency">
      <p class="transparency-text">
        <span class="transparency-icon">💡</span>
        Prices include all electricity charges and delivery fees - no hidden costs
      </p>
    </div>
  </div>

  <!-- Contract Details -->
  <div class="contract-details">
    <div class="contract-grid">
      <div class="detail-item">
        <span class="label">Contract Length:</span>
        <span class="value">{plan.contract.length} months</span>
      </div>
      <div class="detail-item">
        <span class="label">Cancellation Fee:</span>
        <span class="value">
          {plan.contract.earlyTerminationFee > 0 
            ? formatCurrency(plan.contract.earlyTerminationFee)
            : 'None'
          }
        </span>
      </div>
      {plan.features.deposit.required && (
        <div class="detail-item">
          <span class="label">Deposit:</span>
          <span class="value">{formatCurrency(plan.features.deposit.amount)}</span>
        </div>
      )}
      {plan.features.billCredit > 0 && (
        <div class="detail-item">
          <span class="label">Bill Credit:</span>
          <span class="value">{formatCurrency(plan.features.billCredit)}</span>
        </div>
      )}
    </div>
  </div>

  <!-- Features & Benefits -->
  {(isGreen || plan.features.freeTime || hasGuarantee) && (
    <div class="features-section">
      <h4 class="features-title">Plan Features</h4>
      <ul class="features-list">
        {isGreen && (
          <li class="feature-item green">
            <span class="feature-icon">🌱</span>
            {plan.features.greenEnergy}% renewable energy
          </li>
        )}
        {plan.features.freeTime && (
          <li class="feature-item">
            <span class="feature-icon">⚡</span>
            Free electricity {plan.features.freeTime.hours} {plan.features.freeTime.days.join(', ')}
          </li>
        )}
        {hasGuarantee && (
          <li class="feature-item">
            <span class="feature-icon">✅</span>
            30-day satisfaction guarantee
          </li>
        )}
        {noDeposit && (
          <li class="feature-item">
            <span class="feature-icon">💰</span>
            No deposit required
          </li>
        )}
      </ul>
    </div>
  )}

  <!-- Action Buttons -->
  <div class="action-section">
    <div class="action-buttons">
      <a 
        href={enrollmentUrl}
        class="btn-primary-texas enroll-btn"
        data-plan-id={plan.id}
        data-provider={plan.provider.name}
        data-rate={plan.pricing.rate1000kWh}
        data-position={position}
      >
        <span class="flex items-center justify-center">
          <span class="mr-2">⚡</span>
          Enroll Now
        </span>
      </a>
      
      <button 
        class="btn-secondary-texas compare-btn"
        data-plan-id={plan.id}
        aria-label={`Add ${plan.name} to comparison`}
      >
        <span class="flex items-center justify-center">
          <span class="mr-1">📊</span>
          {showComparison ? 'Remove' : 'Compare'}
        </span>
      </button>
    </div>
    
    <div class="enrollment-info">
      <div class="flex items-center justify-between text-xs text-gray-600">
        <span class="enrollment-type">
          {plan.availability.enrollmentType === 'online' ? '🌐 Online enrollment available' : 
           plan.availability.enrollmentType === 'phone' ? '📞 Call to enroll' : 
           '🌐📞 Online & phone enrollment'}
        </span>
        <span class="trust-indicator">
          ✅ Texas Approved
        </span>
      </div>
    </div>
  </div>

  <!-- Fine Print -->
  <div class="fine-print">
    <p>
      Rates include energy charges and TDU delivery fees. 
      Prices shown for average monthly usage in {city}. 
      <a href="/terms" class="terms-link">See terms and conditions</a>.
    </p>
  </div>
</div>

<style>
  .plan-card {
    @apply bg-white border border-gray-200 rounded-lg shadow-sm p-6 mb-4 relative overflow-hidden;
  }
  
  .plan-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 4px;
    background: linear-gradient(90deg, #002768 0%, #be0b31 100%);
  }

  .plan-card-hover {
    transition: all 0.3s ease;
  }
  .plan-card-hover:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
  }

  .plan-header {
    @apply flex justify-between items-start mb-4;
  }

  .provider-info {
    @apply flex items-center gap-3;
  }

  .provider-logo {
    @apply object-contain max-w-[60px] max-h-[30px];
  }

  .provider-details {
    @apply flex-1;
  }

  .plan-name {
    @apply text-lg font-semibold text-gray-900 mb-1;
  }

  .provider-name {
    @apply text-sm text-gray-600 mb-2;
  }

  .rating {
    @apply flex items-center gap-2;
  }

  .stars {
    @apply text-yellow-400;
  }

  .star {
    @apply text-sm;
  }

  .star.filled {
    @apply text-yellow-400;
  }

  .star:not(.filled) {
    @apply text-gray-300;
  }

  .rating-text {
    @apply text-xs text-gray-600;
  }

  .trust-signals {
    @apply flex flex-wrap gap-2;
  }

  .trust-badge {
    @apply bg-blue-100 text-blue-800 text-xs font-medium px-3 py-1 rounded-full border border-blue-200;
  }

  .pricing-section {
    @apply border-t border-gray-100 pt-4 mb-4;
  }

  .rate-display {
    @apply text-center mb-4;
  }

  .main-rate {
    @apply flex items-baseline justify-center gap-1;
  }

  .rate-value {
    @apply text-3xl font-bold;
  }
  
  .best-value-badge {
    @apply mt-2;
  }

  .savings-badge {
    @apply mt-2;
  }

  .rate-unit {
    @apply text-sm text-gray-600;
  }

  .rate-type {
    @apply text-sm text-gray-500 capitalize;
  }

  .usage-pricing {
    @apply grid grid-cols-3 gap-2;
  }

  .usage-tier {
    @apply text-center p-3 rounded-lg border border-gray-100 relative;
  }

  .usage-tier.highlighted {
    @apply border-blue-200 bg-blue-50;
  }

  .usage-amount {
    @apply block text-sm text-gray-600 mb-1;
  }

  .monthly-bill {
    @apply block font-bold text-lg text-texas-navy;
  }

  .monthly-label {
    @apply block text-xs text-gray-500 mt-1;
  }

  .popular {
    @apply absolute -top-2 left-1/2 transform -translate-x-1/2 bg-yellow-500 text-yellow-900 text-xs px-2 py-1 rounded-full font-semibold;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  .price-transparency {
    @apply mt-4 p-3 bg-green-50 border border-green-200 rounded-lg;
  }

  .transparency-text {
    @apply text-xs text-green-800 flex items-center gap-2 font-medium;
  }

  .transparency-icon {
    @apply text-sm;
  }

  .contract-details {
    @apply border-t border-gray-100 pt-4 mb-4;
  }

  .contract-grid {
    @apply grid grid-cols-2 gap-3;
  }

  .detail-item {
    @apply flex flex-col;
  }

  .label {
    @apply text-xs text-gray-600 mb-1;
  }

  .value {
    @apply text-sm font-medium text-gray-900;
  }

  .features-section {
    @apply border-t border-gray-100 pt-4 mb-4;
  }

  .features-title {
    @apply text-sm font-medium text-gray-900 mb-3;
  }

  .features-list {
    @apply space-y-2;
  }

  .feature-item {
    @apply flex items-center gap-2 text-sm text-gray-700;
  }

  .feature-item.green {
    @apply text-green-700;
  }

  .feature-icon {
    @apply text-base;
  }

  .action-section {
    @apply border-t border-gray-100 pt-4;
  }

  .action-buttons {
    @apply flex gap-3 mb-3;
  }

  .btn-primary-texas {
    @apply flex-1 bg-red-600 hover:bg-red-700 text-white font-semibold py-3 px-6 rounded-lg text-center transition-all duration-200 transform hover:scale-105 shadow-md;
  }

  .btn-secondary-texas {
    @apply bg-white border-2 border-blue-600 text-blue-600 hover:bg-blue-600 hover:text-white font-medium py-3 px-4 rounded-lg transition-all duration-200;
  }

  .enrollment-info {
    @apply mt-3;
  }

  .enrollment-type {
    @apply text-xs text-gray-600 flex items-center;
  }

  .trust-indicator {
    @apply inline-flex items-center space-x-1 bg-green-100 text-green-800 px-2 py-1 rounded-full text-xs font-medium;
  }

  .fine-print {
    @apply border-t border-gray-100 pt-3 mt-4;
  }

  .fine-print p {
    @apply text-xs text-gray-500 leading-relaxed;
  }

  .terms-link {
    @apply text-blue-600 hover:text-blue-800 underline;
  }

  /* Mobile optimizations */
  @media (max-width: 640px) {
    .plan-card {
      @apply p-4;
    }

    .plan-header {
      @apply flex-col gap-3 mb-6;
    }

    .provider-info {
      @apply flex-col items-start gap-2 mb-4;
    }

    .trust-signals {
      @apply justify-start mt-3;
    }

    .usage-pricing {
      @apply grid-cols-1 gap-3;
    }

    .contract-grid {
      @apply grid-cols-1 gap-2;
    }

    .action-buttons {
      @apply flex-col gap-3;
    }
    
    .btn-primary-texas, .btn-secondary-texas {
      @apply text-sm py-2 px-4;
    }
  }
</style>

<!-- Enhanced analytics tracking -->
<script>
  // Track plan card interactions and handle comparison functionality
  document.addEventListener('click', (event) => {
    const target = event.target as HTMLElement;
    
    // Track enrollment clicks
    if (target.classList.contains('enroll-btn')) {
      const planId = target.dataset.planId;
      const provider = target.dataset.provider;
      const rate = target.dataset.rate;
      const position = target.dataset.position;
      
      if (typeof gtag !== 'undefined') {
        gtag('event', 'plan_click', {
          plan_id: planId,
          provider: provider,
          rate: rate,
          position: parseInt(position || '0'),
          page_url: window.location.pathname,
        });
      }
    }
    
    // Handle comparison clicks
    if (target.classList.contains('compare-btn')) {
      const button = target.closest('button') as HTMLButtonElement;
      const planId = button.dataset.planId;
      
      // Find the plan data from the card
      const planCard = button.closest('.plan-card') as HTMLElement;
      const planData = planCard ? extractPlanDataFromCard(planCard) : null;
      
      if (planData) {
        const isCurrentlyInComparison = button.textContent?.includes('Remove');
        const action = isCurrentlyInComparison ? 'remove' : 'add';
        
        // Dispatch comparison event
        window.dispatchEvent(new CustomEvent('compare-toggle', {
          detail: { plan: planData, action }
        }));
        
        // Update button text
        const buttonText = button.querySelector('span');
        if (buttonText) {
          buttonText.innerHTML = isCurrentlyInComparison 
            ? '<span class="mr-1">📊</span>Compare'
            : '<span class="mr-1">📊</span>Remove';
        }
      }
      
      if (typeof gtag !== 'undefined') {
        gtag('event', 'compare_click', {
          plan_id: planId,
          page_url: window.location.pathname,
        });
      }
    }
  });

  // Listen for comparison updates from the comparison bar
  window.addEventListener('comparison-updated', (event: CustomEvent) => {
    const { planId, inComparison } = event.detail;
    const button = document.querySelector(`[data-plan-id="${planId}"].compare-btn`) as HTMLButtonElement;
    
    if (button) {
      const buttonText = button.querySelector('span');
      if (buttonText) {
        buttonText.innerHTML = inComparison 
          ? '<span class="mr-1">📊</span>Remove'
          : '<span class="mr-1">📊</span>Compare';
      }
    }
  });

  // Helper function to extract plan data from card DOM
  function extractPlanDataFromCard(planCard: HTMLElement) {
    const planId = planCard.dataset.planId;
    if (!planId) return null;

    // Extract basic info from data attributes and DOM content
    const providerName = planCard.querySelector('.provider-name')?.textContent?.trim() || '';
    const planName = planCard.querySelector('.plan-name')?.textContent?.trim() || '';
    const rateText = planCard.querySelector('.rate-value')?.textContent?.trim() || '0¢';
    const rate = parseFloat(rateText.replace('¢', '')) / 100;

    return {
      id: planId,
      name: planName,
      provider: {
        name: providerName,
        logo: '',
        rating: 0,
        reviewCount: 0
      },
      pricing: {
        rate500kWh: rate * 0.95, // Approximate
        rate1000kWh: rate,
        rate2000kWh: rate * 0.98, // Approximate
        ratePerKwh: rate
      },
      contract: {
        length: 12, // Default
        type: 'fixed' as const,
        earlyTerminationFee: 0,
        autoRenewal: false,
        satisfactionGuarantee: false
      },
      features: {
        greenEnergy: 0,
        billCredit: 0,
        deposit: {
          required: false,
          amount: 0
        }
      },
      availability: {
        enrollmentType: 'both' as const,
        serviceAreas: []
      }
    };
  }
</script>