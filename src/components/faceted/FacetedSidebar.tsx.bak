/**
 * FacetedSidebar React Component
 * Interactive filter sidebar for faceted navigation pages
 * Handles client-side filtering and URL updates
 * 
 * UPGRADED: Now uses shadcn/ui v4 components with Texas branding
 */

import { useState, useEffect } from 'react';
import { Button } from '../ui/button';
import { Checkbox } from '../ui/checkbox';
import { Badge } from '../ui/badge';
import { Separator } from '../ui/separator';
import { ChevronDown, X, Settings, RotateCcw } from 'lucide-react';
import type { FacetedSidebarProps, AvailableFilter } from '../../types/facets';
import { addFilterToUrl, removeFilterFromUrl } from '../../lib/faceted/url-parser';
import { cn } from '../../lib/utils';

interface FilterGroup {
  type: string;
  label: string;
  filters: AvailableFilter[];
}

const FacetedSidebar: React.FC<FacetedSidebarProps> = ({
  currentFilters,
  availableFilters,
  planCounts
}) => {
  const [isOpen, setIsOpen] = useState(false);
  const [expandedGroups, setExpandedGroups] = useState<Set<string>>(new Set(['term', 'plan_features']));

  // Group filters by category
  const filterGroups: FilterGroup[] = [
    {
      type: 'term',
      label: 'How long do you want to commit?',
      filters: availableFilters.filter(f => f.type === 'term')
    },
    {
      type: 'rate_type', 
      label: 'How should your rate work?',
      filters: availableFilters.filter(f => f.type === 'rate_type')
    },
    {
      type: 'green_energy',
      label: 'Want clean energy?',
      filters: availableFilters.filter(f => f.type === 'green_energy')
    },
    {
      type: 'plan_features',
      label: 'Any special features?',
      filters: availableFilters.filter(f => f.type === 'plan_features')
    }
  ].filter(group => group.filters.length > 0);

  const toggleGroup = (groupType: string) => {
    const newExpanded = new Set(expandedGroups);
    if (newExpanded.has(groupType)) {
      newExpanded.delete(groupType);
    } else {
      newExpanded.add(groupType);
    }
    setExpandedGroups(newExpanded);
  };

  const handleFilterChange = (filter: AvailableFilter, isChecked: boolean) => {
    const currentPath = window.location.pathname;
    let newUrl: string;

    if (isChecked) {
      newUrl = addFilterToUrl(currentPath, filter.value);
    } else {
      newUrl = removeFilterFromUrl(currentPath, filter.value);
    }

    // Track filter interaction
    if (typeof gtag !== 'undefined') {
      gtag('event', 'filter_interaction', {
        action: isChecked ? 'add' : 'remove',
        filter_type: filter.value,
        result_count: filter.count,
        page_url: currentPath,
      });
    }

    // Navigate to new URL
    window.history.pushState({}, '', newUrl);
    window.location.reload(); // Force reload to update server-rendered content
  };

  const clearAllFilters = () => {
    const pathParts = window.location.pathname.split('/');
    const cityIndex = pathParts.findIndex(part => part === 'electricity-plans') - 1;
    if (cityIndex >= 0) {
      const city = pathParts[cityIndex];
      const cityUrl = `/texas/${city}/electricity-plans`;
      window.history.pushState({}, '', cityUrl);
      window.location.reload();
    }
  };

  // Mobile responsive behavior
  useEffect(() => {
    const handleResize = () => {
      if (window.innerWidth >= 1024) {
        setIsOpen(true);
      } else {
        setIsOpen(false);
      }
    };

    handleResize();
    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  return (
    <div className="relative">
      {/* Mobile toggle button */}
      <Button 
        variant="outline"
        size="lg"
        className="lg:hidden w-full justify-between mb-4 bg-white border-gray-200 hover:bg-texas-cream-100 hover:border-texas-navy/30 text-gray-700 hover:text-texas-navy"
        onClick={() => setIsOpen(!isOpen)}
        aria-expanded={isOpen}
        aria-label="Show filter options"
      >
        <div className="flex items-center gap-2">
          <Settings className="h-4 w-4" />
          <span className="font-medium">Find What Fits</span>
        </div>
        {currentFilters.length > 0 && (
          <Badge variant="default" className="bg-texas-navy text-white hover:bg-texas-navy/90 ml-2">
            {currentFilters.length}
          </Badge>
        )}
        <ChevronDown className={cn("h-4 w-4 transition-transform", isOpen && "rotate-180")} />
      </Button>

      {/* Sidebar content */}
      <div className={cn(
        "bg-white border border-gray-200 rounded-lg shadow-sm overflow-hidden transition-all duration-300",
        "lg:sticky lg:top-8",
        // Mobile styles
        "lg:transform-none lg:relative lg:right-auto lg:w-auto lg:max-w-none lg:shadow-sm",
        isOpen ? (
          "fixed top-0 right-0 bottom-0 w-80 max-w-[85vw] z-50 transform translate-x-0 shadow-xl lg:shadow-sm"
        ) : (
          "fixed top-0 right-0 bottom-0 w-80 max-w-[85vw] z-50 transform translate-x-full lg:transform-none lg:relative lg:right-auto lg:w-auto lg:max-w-none"
        )
      )}>
        {/* Header */}
        <div className="flex items-center justify-between p-4 border-b border-gray-200">
          <h3 className="text-lg font-semibold text-texas-navy">What Matters to You?</h3>
          {currentFilters.length > 0 && (
            <Button 
              variant="ghost"
              size="sm"
              className="text-texas-navy hover:text-texas-red hover:bg-texas-cream-100 p-2 h-auto"
              onClick={clearAllFilters}
              aria-label="Clear all filters"
            >
              <RotateCcw className="h-4 w-4 mr-1" />
              Clear All
            </Button>
          )}
        </div>

        {/* Active filters */}
        {currentFilters.length > 0 && (
          <div className="p-4 bg-gray-50 border-b border-gray-200">
            <h4 className="text-sm font-semibold text-gray-700 mb-3">You're looking for:</h4>
            <div className="flex flex-wrap gap-2">
              {currentFilters.map(filter => {
                const filterObj = availableFilters.find(f => f.value === filter);
                return (
                  <Badge
                    key={filter}
                    variant="destructive"
                    className="bg-texas-red hover:bg-texas-red/80 text-white cursor-pointer transition-colors group"
                    onClick={() => filterObj && handleFilterChange(filterObj, false)}
                  >
                    <span>{filterObj?.label || filter}</span>
                    <X className="h-3 w-3 ml-1 group-hover:text-white/80" />
                  </Badge>
                );
              })}
            </div>
          </div>
        )}

        {/* Filter groups */}
        <div className="max-h-[60vh] overflow-y-auto">
          {filterGroups.map(group => (
            <div key={group.type} className="border-b border-gray-200 last:border-b-0">
              <Button
                variant="ghost"
                className="w-full justify-between p-4 h-auto bg-white hover:bg-gray-50 text-left font-medium text-gray-900 border-none rounded-none"
                onClick={() => toggleGroup(group.type)}
                aria-expanded={expandedGroups.has(group.type)}
              >
                <h4 className="text-sm font-semibold">{group.label}</h4>
                <ChevronDown 
                  className={cn(
                    "h-4 w-4 text-gray-500 transition-transform", 
                    expandedGroups.has(group.type) && "rotate-180"
                  )} 
                />
              </Button>

              {expandedGroups.has(group.type) && (
                <div className="px-4 pb-4 space-y-1">
                  {group.filters.map(filter => {
                    const isActive = currentFilters.includes(filter.value);
                    return (
                      <label
                        key={filter.value}
                        className={cn(
                          "flex items-center gap-3 p-2 cursor-pointer transition-colors rounded-md hover:bg-texas-cream-100",
                          isActive && "text-texas-navy font-medium bg-texas-cream-50"
                        )}
                      >
                        <Checkbox
                          checked={isActive}
                          onCheckedChange={(checked) => handleFilterChange(filter, !!checked)}
                          className="data-[state=checked]:bg-texas-navy data-[state=checked]:border-texas-navy"
                        />
                        <div className="flex justify-between items-center flex-1">
                          <span className="text-sm">{filter.label}</span>
                          <span className="text-xs text-gray-500 ml-auto">({filter.count})</span>
                        </div>
                      </label>
                    );
                  })}
                </div>
              )}
            </div>
          ))}
        </div>

        {/* Help text */}
        <div className="p-4 bg-gray-50 border-t border-gray-200">
          <p className="text-xs text-gray-600 leading-relaxed">
            Pick what's important to you. All prices include delivery and taxesâ€”no surprises. We only show plans that actually work in your area.
          </p>
        </div>
      </div>

      {/* Mobile overlay */}
      {isOpen && (
        <div 
          className="fixed inset-0 bg-black/50 z-40 lg:hidden"
          onClick={() => setIsOpen(false)}
          aria-hidden="true"
        />
      )}
    </div>
  );
};

export default FacetedSidebar;