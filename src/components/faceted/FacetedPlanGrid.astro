---
/**
 * Enhanced FacetedPlanGrid Component
 * Advanced plan grid with sorting, filtering, comparison, infinite scroll,
 * and mobile-optimized display features for electricity plan comparison
 */
import { EnterprisePlanCard } from '../ui/EnterprisePlanCard';
import type { Plan } from '../../types/facets';

interface Props {
  plans: Plan[];
  city: string;
  filters: string[];
  showComparison?: boolean;
  analyticsContext?: any;
  defaultSort?: 'price' | 'rating' | 'green' | 'term' | 'popularity';
  viewMode?: 'grid' | 'table' | 'compact';
  enableInfiniteScroll?: boolean;
  plansPerPage?: number;
  className?: string;
}

const { 
  plans, 
  city, 
  filters, 
  showComparison = true, 
  analyticsContext,
  defaultSort = 'price',
  viewMode = 'grid',
  enableInfiniteScroll = true,
  plansPerPage = 12,
  className = ''
} = Astro.props;

// Plan sorting and filtering logic
const sortPlans = (plans: Plan[], sortBy: string) => {
  const sorted = [...plans];
  
  switch (sortBy) {
    case 'price':
      return sorted.sort((a, b) => a.pricing.rate1000kWh - b.pricing.rate1000kWh);
    case 'rating':
      return sorted.sort((a, b) => b.provider.rating - a.provider.rating);
    case 'green':
      return sorted.sort((a, b) => b.features.greenEnergy - a.features.greenEnergy);
    case 'term':
      return sorted.sort((a, b) => a.contract.length - b.contract.length);
    case 'popularity':
      return sorted.sort((a, b) => b.provider.reviewCount - a.provider.reviewCount);
    default:
      return sorted;
  }
};

// Get plans for initial display
const sortedPlans = sortPlans(plans, defaultSort);
const initialPlans = enableInfiniteScroll ? sortedPlans.slice(0, plansPerPage) : sortedPlans;
const remainingPlans = enableInfiniteScroll ? sortedPlans.slice(plansPerPage) : [];

// Convert plans to EnterprisePlanCard format
const convertedInitialPlans = initialPlans.map((plan) => ({
  id: plan.id,
  name: plan.name,
  provider: plan.provider.name,
  rate: plan.pricing.rate1000kWh,
  contractTerm: `${plan.contract.length} months`,
  planType: plan.contract.type as 'fixed' | 'variable' | 'indexed',
  greenEnergy: plan.features.greenEnergy > 0,
  noDeposit: !plan.features.deposit.required,
  topRated: plan.provider.rating >= 4.5,
  features: [
    plan.contract.type === 'fixed' ? 'Fixed Rate' : plan.contract.type === 'variable' ? 'Variable Rate' : 'Indexed Rate',
    ...(plan.features.greenEnergy > 0 ? [`${plan.features.greenEnergy}% Green Energy`] : []),
    ...(!plan.features.deposit.required ? ['No Deposit'] : []),
    ...(plan.features.freeTime ? ['Free Time'] : []),
    ...(plan.features.billCredit > 0 ? ['Bill Credit'] : [])
  ].filter(Boolean),
  slug: plan.name.toLowerCase().replace(/\s+/g, '-').replace(/[^a-z0-9-]/g, ''),
  // Add pricing for different usage levels
  pricing: {
    rate500kWh: plan.pricing.rate500kWh || plan.pricing.rate1000kWh,
    rate1000kWh: plan.pricing.rate1000kWh,
    rate2000kWh: plan.pricing.rate2000kWh || plan.pricing.rate1000kWh
  }
}));

// Calculate statistics for display
const totalPlans = plans.length;
const avgRate = plans.length > 0 
  ? (plans.reduce((sum, plan) => sum + plan.pricing.rate1000kWh, 0) / plans.length) 
  : 0;
const lowestRate = plans.length > 0 
  ? Math.min(...plans.map(plan => plan.pricing.rate1000kWh))
  : 0;
const greenPlans = plans.filter(plan => plan.features.greenEnergy > 0).length;
const noDepositPlans = plans.filter(plan => !plan.features.deposit.required).length;

// Generate sorting options
const sortingOptions = [
  { value: 'price', label: 'Lowest Price', icon: '', description: 'Cheapest rates first' },
  { value: 'rating', label: 'Highest Rated', icon: '', description: 'Best customer reviews' },
  { value: 'green', label: 'Most Green', icon: '', description: 'Highest renewable energy %' },
  { value: 'term', label: 'Shortest Term', icon: '', description: 'Flexible contracts' },
  { value: 'popularity', label: 'Most Popular', icon: '', description: 'Most customer reviews' }
];
---

<div class={`enhanced-plan-grid ${className}`} data-city={city} data-total-plans={totalPlans}>
  
  <!-- Grid Header with Statistics and Controls -->
  <div class="grid-header" role="region" aria-labelledby="grid-stats-title">
    <div class="grid-stats">
      <h2 id="grid-stats-title" class="sr-only">Plan Statistics</h2>
      <div class="stats-overview">
        <div class="stat-item primary" role="img" aria-label={`${totalPlans} electricity plans found`}>
          <span class="stat-icon" aria-hidden="true">📊</span>
          <div class="stat-content">
            <span class="stat-number">{totalPlans}</span>
            <span class="stat-label">Plans Found</span>
          </div>
        </div>
        
        {lowestRate > 0 && (
          <div class="stat-item" role="img" aria-label={`Lowest rate available: ${lowestRate.toFixed(1)} cents per kilowatt hour`}>
            <span class="stat-icon" aria-hidden="true">💰</span>
            <div class="stat-content">
              <span class="stat-number">{lowestRate.toFixed(1)}¢</span>
              <span class="stat-label">Lowest Rate</span>
            </div>
          </div>
        )}
        
        
        {avgRate > 0 && (
          <div class="stat-item" role="img" aria-label={`Average rate: ${avgRate.toFixed(1)} cents per kilowatt hour`}>
            <span class="stat-icon" aria-hidden="true">📈</span>
            <div class="stat-content">
              <span class="stat-number">{avgRate.toFixed(1)}¢</span>
              <span class="stat-label">Average Rate</span>
            </div>
          </div>
        )}
      </div>
      
      <!-- Quick Usage Filters -->
      <div class="quick-filters" role="group" aria-labelledby="quick-filters-title">
        <h3 id="quick-filters-title" class="quick-filters-label">Quick Filters:</h3>
        <div class="filter-buttons" role="group" aria-label="Filter plans by usage or features">
          <button class="filter-btn active" data-usage="1000" aria-pressed="true" aria-describedby="filter-1000-desc">
            Best for 1000 kWh
          </button>
          <div id="filter-1000-desc" class="sr-only">Filter plans optimized for 1000 kilowatt hours monthly usage</div>
          
          <button class="filter-btn" data-usage="500" aria-pressed="false" aria-describedby="filter-500-desc">
            Best for 500 kWh
          </button>
          <div id="filter-500-desc" class="sr-only">Filter plans optimized for 500 kilowatt hours monthly usage</div>
          
          <button class="filter-btn" data-usage="2000" aria-pressed="false" aria-describedby="filter-2000-desc">
            Best for 2000 kWh
          </button>
          <div id="filter-2000-desc" class="sr-only">Filter plans optimized for 2000 kilowatt hours monthly usage</div>
          
          <button class="filter-btn" data-filter="green" aria-pressed="false" aria-describedby="filter-green-desc">
            100% Green Energy
          </button>
          <div id="filter-green-desc" class="sr-only">Show only plans with 100% renewable energy sources</div>
          
          <button class="filter-btn" data-filter="cheapest" aria-pressed="false" aria-describedby="filter-cheapest-desc">
            Cheapest Overall
          </button>
          <div id="filter-cheapest-desc" class="sr-only">Show plans sorted by lowest price</div>
        </div>
      </div>
    </div>
    
    <!-- Sorting and View Controls -->
    <div class="grid-controls">
      <div class="sort-controls">
        <label for="sort-select" class="sort-label">
          <span class="sort-icon"></span>
          Sort by:
        </label>
        <select id="sort-select" class="sort-select" data-default={defaultSort}>
          {sortingOptions.map(option => (
            <option value={option.value} selected={option.value === defaultSort}>
              {option.label}
            </option>
          ))}
        </select>
      </div>
      
      <div class="view-controls">
        <div class="view-toggle-group" role="radiogroup" aria-label="Display mode">
          <button 
            class={`view-toggle ${viewMode === 'grid' ? 'active' : ''}`}
            data-view="grid"
            aria-label="Grid view"
            title="Grid View"
          >
            <span class="view-icon">Grid</span>
          </button>
          <button 
            class={`view-toggle ${viewMode === 'table' ? 'active' : ''}`}
            data-view="table"
            aria-label="Table view"
            title="Table View"
          >
            <span class="view-icon">Table</span>
          </button>
          <button 
            class={`view-toggle ${viewMode === 'compact' ? 'active' : ''}`}
            data-view="compact"
            aria-label="Compact view"
            title="Compact View"
          >
            <span class="view-icon">Compact</span>
          </button>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Plans Display -->
  {plans.length > 0 ? (
    <div class="plans-container">
      
      <!-- Grid View - Mobile-First Responsive -->
      <div class={`grid-view ${viewMode === 'grid' ? 'active' : 'hidden'}`}>
        <div class="plans-grid grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 md:gap-8">
          {/* Initial visible plans */}
          {convertedInitialPlans.map((plan) => (
            <EnterprisePlanCard 
              plan={plan}
              onViewDetails={(selectedPlan) => {
                window.location.href = `/electricity-plans/${selectedPlan.provider.toLowerCase().replace(/\s+/g, '-')}/${selectedPlan.slug}`;
              }}
              client:load
              className="h-full"
            />
          ))}
          
          {/* Hidden plans for load more */}
          {remainingPlans.map((plan) => {
            const convertedPlan = {
              id: plan.id,
              name: plan.name,
              provider: plan.provider.name,
              rate: plan.pricing.rate1000kWh,
              contractTerm: `${plan.contract.length} months`,
              planType: plan.contract.type as 'fixed' | 'variable' | 'indexed',
              greenEnergy: plan.features.greenEnergy > 0,
              noDeposit: !plan.features.deposit.required,
              topRated: plan.provider.rating >= 4.5,
              features: [
                plan.contract.type === 'fixed' ? 'Fixed Rate' : plan.contract.type === 'variable' ? 'Variable Rate' : 'Indexed Rate',
                ...(plan.features.greenEnergy > 0 ? [`${plan.features.greenEnergy}% Green Energy`] : []),
                ...(!plan.features.deposit.required ? ['No Deposit'] : []),
                ...(plan.features.freeTime ? ['Free Time'] : []),
                ...(plan.features.billCredit > 0 ? ['Bill Credit'] : [])
              ].filter(Boolean),
              slug: plan.name.toLowerCase().replace(/\s+/g, '-').replace(/[^a-z0-9-]/g, ''),
              pricing: {
                rate500kWh: plan.pricing.rate500kWh || plan.pricing.rate1000kWh,
                rate1000kWh: plan.pricing.rate1000kWh,
                rate2000kWh: plan.pricing.rate2000kWh || plan.pricing.rate1000kWh
              }
            };
            
            return (
              <div style="display: none;" class="load-more-card">
                <EnterprisePlanCard 
                  plan={convertedPlan}
                  onViewDetails={(selectedPlan) => {
                    window.location.href = `/electricity-plans/${selectedPlan.provider.toLowerCase().replace(/\s+/g, '-')}/${selectedPlan.slug}`;
                  }}
                  client:load
                  className="h-full"
                />
              </div>
            );
          })}
        </div>
      </div>
      
      <!-- Table View -->
      <div class={`table-view ${viewMode === 'table' ? 'active' : 'hidden'}`}>
        <div class="plans-table-container">
          <table class="plans-table">
            <thead class="table-header">
              <tr>
                <th class="provider-col">Provider & Plan</th>
                <th class="rate-col sortable" data-sort="price">
                  <button class="sort-header">
                    Rate <span class="sort-arrow">↕</span>
                  </button>
                </th>
                <th class="term-col sortable" data-sort="term">
                  <button class="sort-header">
                    Term <span class="sort-arrow">↕</span>
                  </button>
                </th>
                <th class="features-col">Features</th>
                <th class="rating-col sortable" data-sort="rating">
                  <button class="sort-header">
                    Rating <span class="sort-arrow">↕</span>
                  </button>
                </th>
                <th class="actions-col">Action</th>
              </tr>
            </thead>
            <tbody class="table-body">
              {initialPlans.map((plan, index) => (
                <tr class="plan-row" data-plan-id={plan.id}>
                  <td class="provider-cell">
                    <div class="provider-info">
                      {plan.provider.logo && (
                        <img 
                          src={plan.provider.logo} 
                          alt={`${plan.provider.name} logo`}
                          class="provider-logo"
                          width="40"
                          height="20"
                          loading="lazy"
                        />
                      )}
                      <div class="plan-details">
                        <div class="plan-name">{plan.name}</div>
                        <div class="provider-name">{plan.provider.name}</div>
                      </div>
                    </div>
                  </td>
                  <td class="rate-cell">
                    <div class="multi-usage-rates">
                      <div class="usage-rate">
                        <span class="rate-value">{(plan.pricing.rate500kWh || plan.pricing.rate1000kWh).toFixed(1)}¢</span>
                        <span class="usage-label">500kWh</span>
                      </div>
                      <div class="usage-rate featured">
                        <span class="rate-value">{plan.pricing.rate1000kWh.toFixed(1)}¢</span>
                        <span class="usage-label">1000kWh</span>
                      </div>
                      <div class="usage-rate">
                        <span class="rate-value">{(plan.pricing.rate2000kWh || plan.pricing.rate1000kWh).toFixed(1)}¢</span>
                        <span class="usage-label">2000kWh</span>
                      </div>
                    </div>
                  </td>
                  <td class="term-cell">
                    <span class="term-length">{plan.contract.length} months</span>
                    <span class="rate-type">{plan.contract.type}</span>
                  </td>
                  <td class="features-cell">
                    <div class="feature-badges">
                      {plan.features.greenEnergy > 0 && (
                        <span class="feature-badge green">
                          {plan.features.greenEnergy}% Green
                        </span>
                      )}
                      {!plan.features.deposit.required && (
                        <span class="feature-badge no-deposit">
                          No Deposit
                        </span>
                      )}
                      {plan.contract.earlyTerminationFee === 0 && (
                        <span class="feature-badge no-fee">
                          No ETF
                        </span>
                      )}
                    </div>
                  </td>
                  <td class="rating-cell">
                    {plan.provider.rating > 0 ? (
                      <div class="rating-display">
                        <div class="stars">
                          {Array.from({length: 5}, (_, i) => (
                            <span class={`star ${i < Math.floor(plan.provider.rating) ? 'filled' : ''}`}>★</span>
                          ))}
                        </div>
                        <span class="rating-value">{plan.provider.rating.toFixed(1)}</span>
                      </div>
                    ) : (
                      <span class="no-rating">No reviews</span>
                    )}
                  </td>
                  <td class="actions-cell">
                    <div class="action-buttons">
                      <a 
                        href={`/electricity-plans/plans/${plan.provider.name.toLowerCase().replace(/\s+/g, '-')}/${plan.name.toLowerCase().replace(/\s+/g, '-').replace(/[^a-z0-9-]/g, '')}`}
                        class="view-details-btn-table"
                        aria-label="View plan details"
                      >
                        <svg class="btn-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24" width="16" height="16">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                        </svg>
                        View Details
                      </a>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
      
      <!-- Compact View -->
      <div class={`compact-view ${viewMode === 'compact' ? 'active' : 'hidden'}`}>
        <div class="compact-plans-list">
          {initialPlans.map((plan, index) => (
            <div class="compact-plan-card" data-plan-id={plan.id}>
              <div class="compact-plan-header">
                <div class="compact-provider-info">
                  {plan.provider.logo && (
                    <img 
                      src={plan.provider.logo} 
                      alt={`${plan.provider.name} logo`}
                      class="compact-provider-logo"
                      width="32"
                      height="16"
                      loading="lazy"
                    />
                  )}
                  <div class="compact-plan-details">
                    <div class="compact-plan-name">{plan.name}</div>
                    <div class="compact-provider-name">{plan.provider.name}</div>
                  </div>
                </div>
                <div class="compact-rate">
                  <div class="compact-multi-usage">
                    <div class="compact-usage-row">
                      <span class="compact-rate-small">{(plan.pricing.rate500kWh || plan.pricing.rate1000kWh).toFixed(1)}¢</span>
                      <span class="compact-usage-small">500kWh</span>
                    </div>
                    <div class="compact-usage-row featured">
                      <span class="compact-rate-value">{plan.pricing.rate1000kWh.toFixed(1)}¢</span>
                      <span class="compact-usage-main">1000kWh</span>
                    </div>
                    <div class="compact-usage-row">
                      <span class="compact-rate-small">{(plan.pricing.rate2000kWh || plan.pricing.rate1000kWh).toFixed(1)}¢</span>
                      <span class="compact-usage-small">2000kWh</span>
                    </div>
                  </div>
                </div>
              </div>
              
              <div class="compact-details">
                <span class="compact-term">{plan.contract.length}mo {plan.contract.type}</span>
                {plan.features.greenEnergy > 0 && (
                  <span class="compact-green">{plan.features.greenEnergy}% Green</span>
                )}
                {!plan.features.deposit.required && (
                  <span class="compact-no-deposit">No Deposit</span>
                )}
              </div>
              
              <div class="compact-actions">
                <a 
                  href={`/electricity-plans/plans/${plan.provider.name.toLowerCase().replace(/\s+/g, '-')}/${plan.name.toLowerCase().replace(/\s+/g, '-').replace(/[^a-z0-9-]/g, '')}`}
                  class="view-details-btn-compact"
                  aria-label="View plan details"
                >
                  <svg class="btn-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24" width="18" height="18">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                  </svg>
                  View Details
                </a>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
    
    <!-- Load More / Infinite Scroll -->
    {enableInfiniteScroll && totalPlans > plansPerPage && (
      <div class="load-more-section" id="load-more-trigger" role="region" aria-label="Load more plans">
        <button class="load-more-btn" data-loaded={plansPerPage} data-total={totalPlans} aria-describedby="load-more-desc">
          <span class="load-more-icon" aria-hidden="true">⬇️</span>
          <span class="load-more-text">
            Load More Plans ({totalPlans - plansPerPage} remaining)
          </span>
          <div class="load-more-spinner hidden" role="status" aria-label="Loading more plans">⏳</div>
        </button>
        <div id="load-more-desc" class="sr-only">Click to load {totalPlans - plansPerPage} additional electricity plans</div>
      </div>
    )}
    
  ) : (
    
    <!-- Enhanced No Plans Message -->
    <div class="no-plans-container" role="region" aria-labelledby="no-plans-title">
      <div class="no-plans-illustration">
        <div class="no-plans-icon" role="img" aria-label="No plans found illustration">🔍⚡</div>
        <div class="no-plans-background-pattern" aria-hidden="true">
          <div class="pattern-dot"></div>
          <div class="pattern-dot"></div>
          <div class="pattern-dot"></div>
        </div>
      </div>
      
      <div class="no-plans-content">
        <h3 id="no-plans-title" class="no-plans-title">Nothing Matches Those Filters</h3>
        <p class="no-plans-description">
          Your search criteria might be too specific for what's actually available in {city}.
          Here's how to find something that'll work for you instead.
        </p>
        
        <div class="no-plans-suggestions">
          <h4 class="suggestions-title">Try This Instead:</h4>
          <ul class="suggestions-list">
            <li>• Remove a few filters - you might be too picky</li>
            <li>• 12-month contracts usually have the ideal rates</li>
            <li>• Fixed rates mean no surprises on your bill</li>
            <li>• Sometimes the best plan isn't what you expected</li>
          </ul>
        </div>
        
        <div class="no-plans-actions" role="group" aria-label="Actions to find plans">
          <button class="clear-filters-btn" onclick="window.location.href = window.location.pathname.split('/').slice(0, -1).join('/') + '/electricity-plans'" aria-describedby="clear-filters-desc">
            <span class="btn-icon" aria-hidden="true">🔄</span>
            Start Fresh
          </button>
          <div id="clear-filters-desc" class="sr-only">Remove all current filters to see all available plans</div>
          
          <a href={`/texas/${city}/electricity-providers`} class="browse-providers-btn" aria-describedby="browse-desc">
            <span class="btn-icon" aria-hidden="true">📄</span>
            Just Show Me Good Plans
          </a>
          <div id="browse-desc" class="sr-only">Browse recommended electricity plans without filters</div>
        </div>
      </div>
    </div>
  )}
  
  <!-- Enhanced Comparison Bar Integration -->
  <div id="comparison-bar-mount" class="comparison-mount"></div>
  
</div>

<style>
  /* Screen Reader Only - Accessibility Utility */
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }
  
  /* Enhanced Plan Grid Styles - Mobile-First - Reduced padding for wider cards */
  .enhanced-plan-grid {
    @apply w-full;
    /* Mobile-first spacing with reduced container padding for wider cards */
    padding: 1rem; /* 16px mobile - reduced from 32px */
    gap: 1.5rem; /* 24px mobile */
    margin-bottom: 3rem; /* 48px mobile */
  }
  
  /* When not within an EnhancedCard, add background and border */
  .enhanced-plan-grid:not(.in-card) {
    border-radius: 0.75rem; /* 12px rounded corners */
    background: linear-gradient(to bottom, #fefefe, #f9fafb);
    border: 1px solid #e5e7eb;
  }
  
  /* When within an EnhancedCard, adjust styling */
  .enhanced-plan-grid.in-card {
    background: transparent;
    border: none;
    border-radius: 0;
  }
  
  /* Tablet spacing - reduced padding */
  @media (min-width: 768px) {
    .enhanced-plan-grid {
      padding: 1.25rem; /* 20px tablet - reduced from 32px */
      gap: 1.5rem; /* 24px tablet */
      margin-bottom: 2.5rem; /* 40px tablet */
    }
  }
  
  /* Desktop spacing - reduced padding */
  @media (min-width: 1024px) {
    .enhanced-plan-grid {
      padding: 1.5rem; /* 24px desktop - reduced from 40px */
      gap: 2rem; /* 32px desktop */
      margin-bottom: 3rem; /* 48px desktop */
    }
  }
  
  /* Grid Header Styles - Enhanced Texas Design System */
  .grid-header {
    @apply bg-gradient-to-r from-texas-cream to-white border border-texas-gold/30 rounded-xl mb-8 shadow-lg;
    /* Mobile-first header spacing */
    padding: 1.5rem; /* 24px mobile */
  }
  
  @media (min-width: 640px) {
    .grid-header {
      @apply rounded-xl mb-7;
      padding: 1.5rem; /* 24px large mobile */
    }
  }
  
  @media (min-width: 768px) {
    .grid-header {
      @apply mb-8;
      padding: 2rem; /* 32px tablet+ */
    }
  }
  
  .grid-stats {
    @apply mb-6;
  }
  
  .stats-overview {
    @apply grid grid-cols-1 gap-2 mb-4 w-full;
  }
  
  @media (min-width: 640px) {
    .stats-overview {
      @apply grid-cols-3 gap-3 mb-4;
    }
  }
  
  @media (min-width: 768px) {
    .stats-overview {
      @apply grid-cols-3 gap-4 mb-4;
    }
  }
  
  .stat-item {
    @apply bg-white rounded-xl flex items-center shadow-md border border-texas-gold/30 transition-all duration-300 hover:shadow-xl hover:-translate-y-1;
    /* Mobile-first stat card spacing */
    padding: 1rem; /* 16px mobile */
    gap: 0.75rem; /* 12px mobile */
  }
  
  @media (min-width: 640px) {
    .stat-item {
      padding: 1rem; /* 16px large mobile */
      gap: 0.75rem; /* 12px large mobile */
    }
  }
  
  @media (min-width: 768px) {
    .stat-item {
      padding: 1.5rem; /* 24px tablet+ */
      gap: 1rem; /* 16px tablet+ */
    }
  }
  
  .stat-item.primary {
    @apply bg-gradient-to-br from-texas-navy to-blue-900 text-white border-texas-navy shadow-lg;
  }
  
  .stat-icon {
    @apply text-2xl;
  }
  
  .stat-content {
    @apply flex flex-col;
  }
  
  .stat-number {
    @apply text-lg font-bold leading-none;
  }
  
  .stat-label {
    @apply text-sm opacity-80 mt-1;
  }
  
  /* Quick Filters - Enhanced Texas Design System */
  .quick-filters {
    @apply mt-4 p-5 rounded-xl border-2 border-texas-gold/30 shadow-sm hover:shadow-md transition-shadow duration-200;
    background: linear-gradient(135deg, #f8edd3 0%, #ffffff 100%);
  }
  
  .quick-filters-label {
    @apply text-sm font-semibold text-texas-navy mb-3;
  }
  
  .filter-buttons {
    @apply flex flex-wrap gap-2;
  }
  
  .filter-btn {
    @apply px-4 py-2.5 text-sm font-semibold rounded-lg border-2 transition-all duration-300 hover:shadow-lg focus:ring-2 focus:ring-texas-navy/50;
    @apply bg-white border-texas-navy/20 text-texas-navy hover:border-texas-navy hover:bg-texas-navy/5 hover:scale-105;
    white-space: nowrap;
  }
  
  .filter-btn.active {
    @apply bg-gradient-to-br from-texas-navy to-blue-900 text-white border-texas-navy shadow-lg scale-105;
  }
  
  .filter-btn:hover:not(.active) {
    @apply bg-texas-cream-50 border-texas-gold/30;
  }
  
  @media (max-width: 640px) {
    .filter-btn {
      @apply text-xs px-3 py-1.5;
    }
    
    .filter-buttons {
      @apply gap-1.5;
    }
    
    .quick-filters {
      @apply p-3;
    }
  }
  
  /* Grid Controls - Mobile-First */
  .grid-controls {
    @apply flex flex-col gap-3 mt-4;
  }
  
  @media (min-width: 640px) {
    .grid-controls {
      gap: 1rem;
      margin-top: 1.25rem;
    }
  }
  
  @media (min-width: 768px) {
    .grid-controls {
      @apply flex-row items-center justify-between;
      gap: 1.5rem;
      margin-top: 2rem;
    }
  }
  
  .sort-controls {
    @apply flex items-center gap-2;
  }
  
  @media (min-width: 640px) {
    .sort-controls {
      gap: 0.75rem;
    }
  }
  
  @media (min-width: 768px) {
    .sort-controls {
      gap: 1rem;
    }
  }
  
  .sort-label {
    @apply text-sm font-medium text-gray-700 flex items-center gap-2;
  }
  
  .sort-icon {
    @apply text-base;
  }
  
  .sort-select {
    @apply bg-white border-2 border-texas-navy/30 rounded-lg px-4 py-3 text-sm font-semibold focus:ring-4 focus:ring-texas-navy/20 focus:border-texas-navy transition-all duration-200 hover:border-texas-navy/50;
  }
  
  .view-controls {
    @apply flex items-center;
  }
  
  .view-toggle-group {
    @apply flex bg-white border-2 border-texas-navy/30 rounded-lg overflow-hidden shadow-sm hover:shadow-md transition-shadow duration-200;
  }
  
  .view-toggle {
    @apply px-4 py-3 text-sm font-medium text-texas-navy hover:bg-texas-navy/10 transition-all duration-200 border-r border-texas-navy/20 last:border-r-0 focus:ring-2 focus:ring-texas-navy/50;
  }
  
  .view-toggle.active {
    @apply bg-texas-navy text-white hover:bg-texas-navy/90 shadow-sm;
  }
  
  .view-icon {
    @apply text-lg;
  }
  
  /* Plans Container */
  .plans-container {
    @apply relative;
  }
  
  .grid-view, .table-view, .compact-view {
    @apply transition-all duration-300;
  }
  
  .grid-view.hidden, .table-view.hidden, .compact-view.hidden {
    @apply opacity-0 pointer-events-none absolute inset-0;
  }
  
  .grid-view.active, .table-view.active, .compact-view.active {
    @apply opacity-100 pointer-events-auto relative;
  }
  
  /* Grid View Styles - Mobile-First - Optimized spacing */
  .plans-grid {
    @apply transition-all duration-300;
    /* Mobile-first grid spacing - reduced padding, optimized gaps */
    gap: 1.5rem; /* 24px mobile - reduced from 32px */
    margin-top: 2rem; /* 32px mobile */
    padding: 0.5rem; /* 8px mobile padding - reduced from 16px */
  }
  
  @media (min-width: 640px) {
    .plans-grid {
      gap: 1.25rem; /* 20px large mobile - reduced from 28px */
      margin-top: 1.75rem;
      padding: 0.25rem; /* 4px large mobile padding - reduced from 12px */
    }
  }
  
  @media (min-width: 768px) {
    .plans-grid {
      gap: 1.5rem; /* 24px tablet - reduced from 32px */
      margin-top: 2rem;
      padding: 0.5rem; /* 8px tablet padding - reduced from 16px */
    }
  }
  
  @media (min-width: 1024px) {
    .plans-grid {
      gap: 1.75rem; /* 28px desktop - reduced from 40px */
      margin-top: 2.5rem;
      padding: 0.75rem; /* 12px desktop padding - reduced from 20px */
    }
  }
  
  /* Enterprise Table View Styles */
  .plans-table-container {
    @apply bg-white rounded-2xl overflow-x-auto shadow-2xl hover:shadow-2xl transition-all duration-500;
    background: linear-gradient(135deg, #ffffff 0%, #f9fafb 100%);
    min-width: 100%;
    /* Ensure horizontal scroll is visible when needed */
    -webkit-overflow-scrolling: touch;
    scrollbar-width: thin;
    scrollbar-color: #002868 #f3f4f6;
    border: none; /* Remove all borders */
  }
  
  /* Custom scrollbar styling for better visibility */
  .plans-table-container::-webkit-scrollbar {
    height: 12px;
  }
  
  .plans-table-container::-webkit-scrollbar-track {
    background: #f3f4f6;
    border-radius: 6px;
  }
  
  .plans-table-container::-webkit-scrollbar-thumb {
    background: #002868;
    border-radius: 6px;
  }
  
  .plans-table-container::-webkit-scrollbar-thumb:hover {
    background: #dc2626;
  }
  
  .plans-table {
    @apply w-full;
    border-collapse: separate;
    border-spacing: 0;
    min-width: 800px; /* Reduced for compact fit */
    border: none; /* Remove table border */
  }
  
  .table-header {
    @apply bg-gradient-to-r from-texas-navy via-blue-800 to-texas-navy;
    position: sticky;
    top: 0;
    z-index: 10;
  }
  
  .table-header th {
    @apply px-3 py-4 text-left text-xs font-bold text-white uppercase tracking-wider;
    text-shadow: 0 2px 4px rgba(0,0,0,0.3);
    background: linear-gradient(135deg, rgba(255,255,255,0.1) 0%, transparent 100%);
    border: none; /* Remove all borders from header cells */
  }
  
  .sort-header {
    @apply flex items-center gap-2 text-sm font-bold text-white hover:text-texas-gold transition-all duration-300 cursor-pointer relative overflow-hidden;
  }
  
  .sort-header::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.1), transparent);
    transition: left 0.5s;
  }
  
  .sort-header:hover::before {
    left: 100%;
  }
  
  .sort-arrow {
    @apply text-texas-gold transition-transform duration-300;
  }
  
  .sort-header:hover .sort-arrow {
    transform: scale(1.2) rotate(180deg);
  }
  
  .plan-row {
    @apply border-b border-gray-100 hover:bg-gradient-to-r hover:from-texas-cream/30 hover:to-transparent transition-all duration-300 hover:shadow-lg;
  }
  
  .plan-row:last-child {
    @apply border-b-0;
  }
  
  .plan-row:hover {
    transform: translateY(-2px);
  }
  
  .plan-row td {
    @apply px-3 py-4 text-sm align-middle;
  }
  
  .provider-cell .provider-info {
    @apply flex items-center gap-3;
  }
  
  .provider-cell .provider-logo {
    @apply object-contain;
  }
  
  .provider-cell .plan-name {
    @apply font-semibold text-gray-900;
  }
  
  .provider-cell .provider-name {
    @apply text-gray-600 text-xs;
  }
  
  .rate-cell .multi-usage-rates {
    @apply flex flex-col gap-1;
  }
  
  .rate-cell .usage-rate {
    @apply flex items-center justify-between;
  }
  
  .rate-cell .usage-rate.featured {
    @apply bg-texas-navy/10 rounded px-2 py-1;
  }
  
  .rate-cell .rate-value {
    @apply text-sm font-bold text-texas-navy;
  }
  
  .rate-cell .usage-rate.featured .rate-value {
    @apply text-base font-bold text-texas-navy;
  }
  
  .rate-cell .usage-label {
    @apply text-xs text-gray-600 font-medium;
  }
  
  .rate-cell .usage-rate.featured .usage-label {
    @apply text-xs text-texas-navy font-semibold;
  }
  
  .term-cell .term-length {
    @apply font-medium;
  }
  
  .term-cell .rate-type {
    @apply text-xs text-gray-600 capitalize;
  }
  
  .feature-badges {
    @apply flex flex-wrap gap-1;
  }
  
  .feature-badge {
    @apply text-xs px-2 py-1 rounded-full font-medium;
  }
  
  .feature-badge.green {
    @apply bg-texas-gold-50 text-texas-gold-700 border border-texas-gold-200;
  }
  
  .feature-badge.no-deposit {
    @apply bg-texas-navy/10 text-texas-navy;
  }
  
  .feature-badge.no-fee {
    @apply bg-texas-cream-100 text-texas-navy;
  }
  
  .rating-display {
    @apply flex items-center gap-2;
  }
  
  .stars {
    @apply text-texas-gold;
  }
  
  .star.filled {
    @apply text-texas-gold;
  }
  
  .star:not(.filled) {
    @apply text-gray-300;
  }
  
  .rating-value {
    @apply text-xs text-gray-600;
  }
  
  .no-rating {
    @apply text-xs text-gray-400;
  }
  
  .action-buttons {
    @apply flex gap-2;
  }
  
  .enroll-btn-small {
    @apply bg-texas-red hover:bg-red-700 text-white text-xs font-bold px-4 py-2 rounded-lg transition-all duration-200 shadow-md hover:shadow-lg hover:scale-105 focus:ring-2 focus:ring-texas-red/50;
  }
  
  .compare-btn-small {
    @apply bg-white hover:bg-texas-navy text-texas-navy hover:text-white text-xs font-semibold px-3 py-2 rounded-lg transition-all duration-200 border-2 border-texas-navy shadow-sm hover:shadow-md focus:ring-2 focus:ring-texas-navy/50;
  }
  
  /* Professional View Details Button for Table View - Compact */
  .view-details-btn-table {
    @apply bg-gradient-to-r from-texas-navy to-blue-800 hover:from-texas-navy/90 hover:to-blue-700 text-white text-xs font-semibold px-3 py-2 rounded-lg transition-all duration-300 transform hover:scale-105 shadow-md hover:shadow-lg focus:ring-2 focus:ring-texas-navy/50 flex items-center gap-1 justify-center;
  }
  
  .view-details-btn-table .btn-icon {
    @apply flex-shrink-0;
  }
  
  /* Enterprise Compact View Styles */
  .compact-plans-list {
    display: flex;
    flex-direction: column;
    gap: 2rem; /* 32px enterprise spacing */
  }
  
  .compact-plan-card {
    @apply bg-white border-2 border-gray-200 rounded-2xl hover:shadow-2xl hover:border-texas-navy hover:-translate-y-3 transition-all duration-500 shadow-lg;
    padding: 2rem; /* 32px enterprise padding */
    background: linear-gradient(135deg, #ffffff 0%, #f9fafb 100%);
    position: relative;
    overflow: hidden;
  }
  
  .compact-plan-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 2px;
    background: linear-gradient(90deg, #002868, #dc2626);
    transition: left 0.5s ease-in-out;
  }
  
  .compact-plan-card:hover::before {
    left: 0;
  }
  
  .compact-plan-header {
    @apply flex justify-between items-start mb-6;
  }
  
  .compact-provider-info {
    @apply flex items-center gap-3 flex-1 min-w-0;
  }
  
  .compact-provider-logo {
    @apply object-contain flex-shrink-0 rounded;
    filter: drop-shadow(0 2px 4px rgba(0,0,0,0.1));
  }
  
  .compact-plan-name {
    @apply font-bold text-lg text-texas-navy truncate;
  }
  
  .compact-provider-name {
    @apply text-sm text-gray-600 font-medium;
  }
  
  .compact-rate {
    @apply text-right bg-gradient-to-br from-texas-cream to-texas-cream/50 rounded-xl px-4 py-3;
  }
  
  .compact-rate-value {
    @apply text-2xl font-bold text-texas-navy block;
    text-shadow: 0 1px 2px rgba(0,0,0,0.1);
  }
  
  .compact-monthly {
    @apply text-sm text-gray-600 font-semibold;
  }
  
  .compact-details {
    @apply flex flex-wrap gap-3 mb-6;
  }
  
  .compact-term, .compact-green, .compact-no-deposit {
    @apply text-sm bg-gradient-to-r from-gray-100 to-gray-50 text-gray-800 px-4 py-2 rounded-xl font-semibold border border-gray-200 hover:border-texas-gold transition-all duration-300;
  }
  
  .compact-green {
    @apply bg-gradient-to-r from-green-50 to-green-100 text-green-800 border-green-200 hover:border-green-400;
  }
  
  .compact-no-deposit {
    @apply bg-gradient-to-r from-texas-gold/10 to-texas-gold/5 text-texas-navy border-texas-gold/30 hover:border-texas-gold;
  }
  
  .compact-actions {
    @apply flex gap-2;
  }
  
  .compact-enroll-btn {
    @apply bg-texas-red hover:bg-red-700 text-white text-sm font-bold px-6 py-3 rounded-lg transition-all duration-200 flex-1 text-center shadow-md hover:shadow-lg hover:scale-105 focus:ring-2 focus:ring-texas-red/50;
  }
  
  .compact-compare-btn {
    @apply bg-white hover:bg-texas-navy text-texas-navy hover:text-white text-sm font-semibold px-4 py-3 rounded-lg transition-all duration-200 border-2 border-texas-navy shadow-sm hover:shadow-md focus:ring-2 focus:ring-texas-navy/50;
  }
  
  /* Professional View Details Button for Compact View */
  .view-details-btn-compact {
    @apply bg-gradient-to-r from-texas-navy to-blue-800 hover:from-texas-navy/90 hover:to-blue-700 text-white text-base font-bold px-8 py-4 rounded-xl transition-all duration-300 transform hover:scale-105 shadow-lg hover:shadow-xl focus:ring-4 focus:ring-texas-navy/50 flex items-center gap-3 justify-center w-full;
  }
  
  .view-details-btn-compact .btn-icon {
    @apply flex-shrink-0;
  }

  /* Multi-usage pricing styles for compact view */
  .compact-multi-usage {
    @apply flex flex-col gap-1;
  }

  .compact-usage-row {
    @apply flex items-center justify-between;
  }

  .compact-usage-row.featured {
    @apply bg-texas-navy/10 rounded px-2 py-1;
  }

  .compact-rate-small {
    @apply text-xs font-semibold text-texas-navy;
  }

  .compact-usage-small {
    @apply text-xs text-gray-600 font-medium;
  }

  .compact-rate-value {
    @apply text-lg font-bold text-texas-navy;
  }

  .compact-usage-main {
    @apply text-xs text-texas-navy font-semibold;
  }
  
  /* Load More Section */
  .load-more-section {
    @apply text-center;
    /* Enterprise-grade load more spacing */
    padding: 3rem 0; /* 48px vertical */
    margin-top: 2rem; /* 32px */
  }
  
  .load-more-btn {
    @apply bg-gradient-to-r from-texas-navy to-blue-900 hover:from-texas-navy/90 hover:to-blue-800 text-white font-bold px-10 py-5 rounded-xl transition-all duration-300 transform hover:scale-105 shadow-xl hover:shadow-2xl flex items-center gap-4 mx-auto focus:ring-4 focus:ring-texas-navy/50;
  }
  
  .load-more-icon {
    @apply text-lg;
  }
  
  .load-more-spinner {
    @apply animate-spin text-lg;
  }
  
  /* Enhanced No Plans Styles */
  .no-plans-container {
    @apply text-center py-20 px-8 max-w-3xl mx-auto bg-gradient-to-br from-texas-cream to-white rounded-2xl border-2 border-texas-gold/30 shadow-xl;
  }
  
  .no-plans-illustration {
    @apply relative mb-8;
  }
  
  .no-plans-icon {
    @apply text-8xl mb-4 relative z-10;
  }
  
  .no-plans-background-pattern {
    @apply absolute inset-0 flex justify-center items-center opacity-10;
  }
  
  .pattern-dot {
    @apply w-2 h-2 bg-gray-400 rounded-full mx-1 animate-pulse;
  }
  
  .pattern-dot:nth-child(2) {
    animation-delay: 0.5s;
  }
  
  .pattern-dot:nth-child(3) {
    animation-delay: 1s;
  }
  
  .no-plans-title {
    @apply text-3xl font-bold text-texas-navy mb-6;
  }
  
  .no-plans-description {
    @apply text-texas-navy/80 text-xl leading-relaxed mb-10;
  }
  
  .no-plans-suggestions {
    @apply bg-gradient-to-br from-texas-cream to-white border-2 border-texas-gold/40 rounded-2xl p-8 mb-10 text-left shadow-lg;
  }
  
  .suggestions-title {
    @apply text-lg font-semibold text-texas-navy mb-4;
  }
  
  .suggestions-list {
    @apply space-y-2;
  }
  
  .suggestions-list li {
    @apply text-texas-navy flex items-center;
  }
  
  .no-plans-actions {
    @apply flex flex-col sm:flex-row gap-4 justify-center;
  }
  
  .clear-filters-btn {
    @apply bg-texas-red hover:bg-red-700 text-white font-bold px-8 py-4 rounded-xl transition-all duration-300 flex items-center gap-3 justify-center shadow-lg hover:shadow-xl hover:scale-105 focus:ring-4 focus:ring-texas-red/50;
  }
  
  .browse-providers-btn {
    @apply bg-texas-navy hover:bg-blue-900 text-white font-bold px-8 py-4 rounded-xl transition-all duration-300 flex items-center gap-3 justify-center shadow-lg hover:shadow-xl hover:scale-105 focus:ring-4 focus:ring-texas-navy/50;
  }
  
  .btn-icon {
    @apply text-lg;
  }
  
  .comparison-mount {
    @apply relative z-50;
  }
  
  /* Mobile-Specific Responsive Adjustments */
  @media (max-width: 640px) {
    /* Small mobile adjustments */
    .stat-number {
      @apply text-base;
    }
    
    .stat-label {
      @apply text-xs;
    }
    
    .view-toggle {
      @apply px-2 py-1 text-xs;
    }
  }
  
  @media (max-width: 768px) {
    /* Mobile and tablet portrait */
    .plans-table-container {
      @apply overflow-x-auto;
    }
    
    .plans-table {
      @apply min-w-full;
    }
    
    .compact-plan-header {
      @apply flex-col gap-2;
    }
    
    .compact-rate {
      @apply text-left;
    }
    
    .compact-actions {
      @apply flex-col gap-2;
    }
    
    .load-more-section {
      padding: 2rem 0;
      margin-top: 1.5rem;
    }
  }
  
  @media (max-width: 480px) {
    /* Very small screens */
    .enhanced-plan-grid {
      gap: 0.75rem;
      margin-bottom: 1.5rem;
    }
    
    .grid-header {
      @apply rounded-lg;
      padding: 0.75rem;
    }
    
    .sort-select {
      @apply text-xs px-2 py-1;
    }
  }
  
  /* Animation for loading states */
  @keyframes shimmer {
    0% { background-position: -200px 0; }
    100% { background-position: calc(200px + 100%) 0; }
  }
  
  .loading-shimmer {
    background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
    background-size: 200px 100%;
    animation: shimmer 1.5s infinite;
  }

  /* Professional Table Column Styling - Compact */
  .provider-col {
    width: 25%;
    min-width: 180px;
  }

  .rate-col {
    width: 15%;
    min-width: 80px;
  }

  .term-col {
    width: 12%;
    min-width: 70px;
  }

  .features-col {
    width: 22%;
    min-width: 120px;
  }

  .rating-col {
    width: 12%;
    min-width: 70px;
  }

  .actions-col {
    width: 14%;
    min-width: 110px;
    text-align: center;
  }
</style>

<!-- Enhanced JavaScript for Advanced Grid Functionality -->
<script>
  // Enhanced Plan Grid Controller
  class EnhancedPlanGrid {
    constructor() {
      this.currentSort = document.querySelector('.sort-select')?.dataset.default || 'price';
      this.currentView = 'grid';
      this.loadedPlans = parseInt(document.querySelector('.load-more-btn')?.dataset.loaded) || 12;
      this.totalPlans = parseInt(document.querySelector('.load-more-btn')?.dataset.total) || 0;
      this.allPlans = [];
      this.isLoading = false;
      
      this.init();
    }
    
    init() {
      this.bindEvents();
      this.setupIntersectionObserver();
      this.loadAllPlansData();
    }
    
    bindEvents() {
      // Sort functionality
      const sortSelect = document.querySelector('.sort-select');
      if (sortSelect) {
        sortSelect.addEventListener('change', (e) => this.handleSort(e.target.value));
      }
      
      // View toggle functionality
      document.querySelectorAll('.view-toggle').forEach(button => {
        button.addEventListener('click', (e) => this.handleViewChange(e.currentTarget.dataset.view));
      });
      
      // Quick filter functionality
      document.querySelectorAll('.filter-btn').forEach(button => {
        button.addEventListener('click', (e) => this.handleQuickFilter(e.currentTarget));
      });
      
      // Table sorting
      document.querySelectorAll('.sortable .sort-header').forEach(header => {
        header.addEventListener('click', (e) => {
          const sortBy = e.currentTarget.closest('.sortable').dataset.sort;
          this.handleSort(sortBy);
        });
      });
      
      // Load more functionality
      const loadMoreBtn = document.querySelector('.load-more-btn');
      if (loadMoreBtn) {
        loadMoreBtn.addEventListener('click', () => this.loadMorePlans());
      }
      
      // Comparison functionality
      document.addEventListener('click', (e) => {
        if (e.target.matches('.compare-btn-small, .compact-compare-btn')) {
          this.handleComparisonToggle(e.target);
        }
      });
      
      // Enhanced analytics tracking
      this.trackGridInteractions();
    }
    
    setupIntersectionObserver() {
      if (!window.IntersectionObserver) return;
      
      const loadTrigger = document.getElementById('load-more-trigger');
      if (!loadTrigger) return;
      
      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting && !this.isLoading && this.loadedPlans < this.totalPlans) {
            this.loadMorePlans(true); // Auto-load on scroll
          }
        });
      }, {
        rootMargin: '200px 0px'
      });
      
      observer.observe(loadTrigger);
    }
    
    async loadAllPlansData() {
      // In a real implementation, this would fetch all plan data
      // For now, we'll work with the existing data on the page
      this.allPlans = this.extractPlanDataFromDOM();
    }
    
    extractPlanDataFromDOM() {
      const planElements = document.querySelectorAll('[data-plan-id]');
      return Array.from(planElements).map(element => {
        return {
          id: element.dataset.planId,
          element: element.cloneNode(true)
        };
      });
    }
    
    handleSort(sortBy) {
      this.currentSort = sortBy;
      
      // Update sort select if triggered by table
      const sortSelect = document.querySelector('.sort-select');
      if (sortSelect && sortSelect.value !== sortBy) {
        sortSelect.value = sortBy;
      }
      
      // Update URL with sort parameter
      const url = new URL(window.location);
      url.searchParams.set('sort', sortBy);
      window.history.replaceState({}, '', url);
      
      // Show loading state
      this.showLoadingState();
      
      // Reload page with new sort (in a real app, this would be client-side)
      setTimeout(() => {
        window.location.href = url.toString();
      }, 500);
      
      // Track sorting
      if (typeof gtag !== 'undefined') {
        gtag('event', 'plans_sorted', {
          sort_type: sortBy,
          current_view: this.currentView,
          plans_visible: this.loadedPlans
        });
      }
    }
    
    handleQuickFilter(button) {
      // Remove active state from all filter buttons and update ARIA
      document.querySelectorAll('.filter-btn').forEach(btn => {
        btn.classList.remove('active');
        btn.setAttribute('aria-pressed', 'false');
      });
      
      // Add active state to clicked button and update ARIA
      button.classList.add('active');
      button.setAttribute('aria-pressed', 'true');
      
      const usage = button.dataset.usage;
      const filter = button.dataset.filter;
      
      // Get all plan cards
      const planCards = document.querySelectorAll('.plans-grid > div');
      const tableRows = document.querySelectorAll('.plan-row');
      const compactCards = document.querySelectorAll('.compact-plan-card');
      
      let visibleCount = 0;
      
      // Filter logic
      planCards.forEach((card, index) => {
        let shouldShow = true;
        
        if (usage) {
          // Filter by usage level - show plans optimized for that usage
          const rateElements = card.querySelectorAll('[class*="rate"]');
          // For now, show all plans for usage filters (would need actual usage data)
          shouldShow = true;
        } else if (filter === 'green') {
          // Show only 100% green energy plans
          const greenBadge = card.querySelector('[class*="green"]');
          shouldShow = greenBadge && greenBadge.textContent.includes('100%');
        } else if (filter === 'cheapest') {
          // Show all plans but sort them by rate
          shouldShow = true;
        }
        
        // Show/hide the card
        if (shouldShow) {
          card.style.display = 'block';
          card.style.opacity = '1';
          visibleCount++;
        } else {
          card.style.display = 'none';
          card.style.opacity = '0';
        }
        
        // Handle table rows
        if (tableRows[index]) {
          tableRows[index].style.display = shouldShow ? '' : 'none';
        }
        
        // Handle compact cards
        if (compactCards[index]) {
          compactCards[index].style.display = shouldShow ? 'block' : 'none';
        }
      });
      
      // Update stats and announce to screen readers
      const statsNumber = document.querySelector('.stat-number');
      const statsItem = document.querySelector('.stat-item.primary');
      if (statsNumber && statsItem) {
        statsNumber.textContent = visibleCount;
        statsItem.setAttribute('aria-label', `${visibleCount} electricity plans found after filtering`);
        
        // Create live region announcement for screen readers
        const announcement = document.createElement('div');
        announcement.setAttribute('aria-live', 'polite');
        announcement.setAttribute('class', 'sr-only');
        announcement.textContent = `Filter applied. Showing ${visibleCount} plans.`;
        document.body.appendChild(announcement);
        setTimeout(() => document.body.removeChild(announcement), 1000);
      }
      
      // Track filter usage
      if (typeof gtag !== 'undefined') {
        gtag('event', 'quick_filter_used', {
          filter_type: filter || `${usage}kWh`,
          results_shown: visibleCount,
          current_view: this.currentView
        });
      }
    }

    handleViewChange(newView) {
      if (newView === this.currentView) return;
      
      const previousView = this.currentView;
      this.currentView = newView;
      
      // Update button states
      document.querySelectorAll('.view-toggle').forEach(btn => {
        btn.classList.remove('active');
      });
      document.querySelector(`[data-view="${newView}"]`).classList.add('active');
      
      // Update view visibility with animation
      const views = ['grid', 'table', 'compact'];
      views.forEach(view => {
        const viewElement = document.querySelector(`.${view}-view`);
        if (viewElement) {
          if (view === newView) {
            viewElement.classList.remove('hidden');
            viewElement.classList.add('active');
          } else {
            viewElement.classList.add('hidden');
            viewElement.classList.remove('active');
          }
        }
      });
      
      // Update URL
      const url = new URL(window.location);
      url.searchParams.set('view', newView);
      window.history.replaceState({}, '', url);
      
      // Track view change
      if (typeof gtag !== 'undefined') {
        gtag('event', 'view_changed', {
          previous_view: previousView,
          new_view: newView,
          plans_visible: this.loadedPlans
        });
      }
    }
    
    async loadMorePlans(isAutoLoad = false) {
      if (this.isLoading || this.loadedPlans >= this.totalPlans) return;
      
      this.isLoading = true;
      const loadMoreBtn = document.querySelector('.load-more-btn');
      
      // Update UI to show loading
      if (loadMoreBtn) {
        const spinner = loadMoreBtn.querySelector('.load-more-spinner');
        const text = loadMoreBtn.querySelector('.load-more-text');
        
        if (spinner) spinner.classList.remove('hidden');
        if (text) text.textContent = 'Loading more plans...';
        loadMoreBtn.disabled = true;
      }
      
      try {
        // Show loading animation briefly
        await new Promise(resolve => setTimeout(resolve, 500));
        
        // Get hidden load-more-card elements
        const hiddenCards = document.querySelectorAll('.load-more-card[style*="display: none"]');
        
        // Show next batch of cards
        const cardsToShow = Math.min(12, hiddenCards.length);
        for (let i = 0; i < cardsToShow; i++) {
          if (hiddenCards[i]) {
            hiddenCards[i].style.display = 'block';
            hiddenCards[i].style.opacity = '1';
          }
        }
        
        this.loadedPlans += cardsToShow;
        const remaining = hiddenCards.length - cardsToShow;
        
        // Update button text or hide if no more plans
        if (loadMoreBtn) {
          const text = loadMoreBtn.querySelector('.load-more-text');
          
          if (remaining > 0) {
            if (text) text.textContent = `Load More Plans (${remaining} remaining)`;
            loadMoreBtn.setAttribute('aria-label', `Load more plans. ${remaining} additional plans available.`);
          } else {
            loadMoreBtn.style.display = 'none';
            loadMoreBtn.setAttribute('aria-hidden', 'true');
            
            // Announce completion to screen readers
            const announcement = document.createElement('div');
            announcement.setAttribute('aria-live', 'polite');
            announcement.setAttribute('class', 'sr-only');
            announcement.textContent = 'All available plans have been loaded.';
            document.body.appendChild(announcement);
            setTimeout(() => document.body.removeChild(announcement), 1000);
          }
        }
        
        // Track load more event
        if (typeof gtag !== 'undefined') {
          gtag('event', 'load_more_plans', {
            is_auto_load: isAutoLoad,
            plans_loaded: this.loadedPlans,
            total_plans: this.totalPlans,
            current_view: this.currentView
          });
        }
        
      } catch (error) {
        console.error('Failed to load more plans:', error);
      } finally {
        this.isLoading = false;
        
        if (loadMoreBtn) {
          const spinner = loadMoreBtn.querySelector('.load-more-spinner');
          if (spinner) spinner.classList.add('hidden');
          loadMoreBtn.disabled = false;
        }
      }
    }
    
    handleComparisonToggle(button) {
      const planId = button.dataset.planId;
      if (!planId) return;
      
      // Toggle button state
      const isAdding = !button.classList.contains('comparing');
      button.classList.toggle('comparing');
      
      // Update button text/appearance
      if (button.classList.contains('compact-compare-btn')) {
        button.textContent = isAdding ? 'Remove' : 'Compare';
      }
      
      // Dispatch event for comparison system
      const planElement = button.closest('[data-plan-id]');
      const planData = this.extractPlanDataFromElement(planElement);
      
      window.dispatchEvent(new CustomEvent('compare-toggle', {
        detail: {
          plan: planData,
          action: isAdding ? 'add' : 'remove'
        }
      }));
      
      // Track comparison interaction
      if (typeof gtag !== 'undefined') {
        gtag('event', 'comparison_toggle', {
          action: isAdding ? 'add' : 'remove',
          plan_id: planId,
          current_view: this.currentView
        });
      }
    }
    
    extractPlanDataFromElement(element) {
      // Extract plan data from DOM element
      // This would be more robust in a real implementation
      const planId = element.dataset.planId;
      const planName = element.querySelector('.plan-name, .compact-plan-name')?.textContent?.trim();
      const providerName = element.querySelector('.provider-name, .compact-provider-name')?.textContent?.trim();
      const rateText = element.querySelector('.rate-value, .compact-rate-value')?.textContent?.trim();
      
      return {
        id: planId,
        name: planName || '',
        provider: {
          name: providerName || '',
          logo: '',
          rating: 0,
          reviewCount: 0
        },
        pricing: {
          rate1000kWh: parseFloat(rateText?.replace('¢', '')) / 100 || 0
        },
        contract: {
          length: 12,
          type: 'fixed',
          earlyTerminationFee: 0,
          autoRenewal: false,
          satisfactionGuarantee: false
        },
        features: {
          greenEnergy: 0,
          billCredit: 0,
          deposit: {
            required: false,
            amount: 0
          }
        },
        availability: {
          enrollmentType: 'both',
          serviceAreas: []
        }
      };
    }
    
    showLoadingState() {
      // Add loading shimmer effect to plan cards
      document.querySelectorAll('.plan-card, .compact-plan-card').forEach(card => {
        card.classList.add('loading-shimmer');
      });
    }
    
    trackGridInteractions() {
      // Track scroll depth
      let maxScroll = 0;
      window.addEventListener('scroll', () => {
        const scrollPercent = Math.round((window.scrollY / (document.body.scrollHeight - window.innerHeight)) * 100);
        if (scrollPercent > maxScroll) {
          maxScroll = scrollPercent;
          if (maxScroll % 25 === 0 && typeof gtag !== 'undefined') {
            gtag('event', 'scroll_depth', {
              scroll_percent: maxScroll,
              page_type: 'plans_grid',
              current_view: this.currentView
            });
          }
        }
      });
      
      // Track time spent on page
      const startTime = Date.now();
      window.addEventListener('beforeunload', () => {
        const timeSpent = Math.round((Date.now() - startTime) / 1000);
        if (typeof gtag !== 'undefined') {
          gtag('event', 'time_on_page', {
            time_seconds: timeSpent,
            plans_viewed: this.loadedPlans,
            max_scroll: maxScroll,
            current_view: this.currentView
          });
        }
      });
    }
  }
  
  // Initialize enhanced plan grid when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => new EnhancedPlanGrid());
  } else {
    new EnhancedPlanGrid();
  }
  
  // Initialize comparison bar if it exists
  if (window.React && document.getElementById('comparison-bar-mount')) {
    import('./ComparisonBar.tsx').then(({ default: ComparisonBar }) => {
      const city = document.querySelector('.enhanced-plan-grid')?.dataset.city;
      if (city) {
        const root = ReactDOM.createRoot(document.getElementById('comparison-bar-mount'));
        root.render(React.createElement(ComparisonBar, { city }));
      }
    });
  }
</script>